aten::as_tensor.float(float t, *, int? dtype=None, Device? device=None) -> (Tensor)
aten::as_tensor.int(int t, *, int? dtype=None, Device? device=None) -> (Tensor)
aten::as_tensor.bool(bool t, *, int? dtype=None, Device? device=None) -> (Tensor)
aten::as_tensor(Tensor(a) data, *, int? dtype=None, Device? device=None) -> (Tensor(b|a))
aten::as_tensor.list(t[] data, *, int? dtype=None, Device? device=None) -> (Tensor)
aten::tensor.float(float t, *, int? dtype=None, Device? device=None, bool requires_grad=False) -> (Tensor)
aten::tensor.int(int t, *, int? dtype=None, Device? device=None, bool requires_grad=False) -> (Tensor)
aten::tensor.bool(bool t, *, int? dtype=None, Device? device=None, bool requires_grad=False) -> (Tensor)
aten::tensor(t[] data, *, int? dtype=None, Device? device=None, bool requires_grad=False) -> (Tensor)
aten::hash.str(str t) -> (int)
aten::hash.int(int t) -> (int)
aten::hash.float(float t) -> (int)
prim::rpc_async(...) -> (...)
aten::gamma.int(int a) -> (float)
aten::gamma.float(float a) -> (float)
aten::gamma.Scalar(Scalar a) -> (Scalar)
aten::factorial.int(int a) -> (int)
aten::radians.int(int a) -> (float)
aten::radians.float(float a) -> (float)
aten::radians.Scalar(Scalar a) -> (Scalar)
aten::degrees.int(int a) -> (float)
aten::degrees.float(float a) -> (float)
aten::degrees.Scalar(Scalar a) -> (Scalar)
aten::mathremainder.int(int a, int b) -> (float)
aten::mathremainder.float(float a, float b) -> (float)
aten::mathremainder.int_float(int a, float b) -> (float)
aten::mathremainder.float_int(float a, int b) -> (float)
aten::mathremainder(Scalar a, Scalar b) -> (float)
aten::ldexp(float x, int i) -> (float)
aten::frexp(float a) -> (float, int)
aten::modf(float a) -> (float, float)
aten::chr(int i) -> (str)
aten::bin(int i) -> (str)
aten::oct(int i) -> (str)
aten::hex(int i) -> (str)
aten::remove.int(int[](a!) self, int el) -> ()
aten::remove.float(float[](a!) self, float el) -> ()
aten::remove.bool(bool[](a!) self, bool el) -> ()
aten::remove.Tensor(Tensor[](a!) self, Tensor el) -> ()
aten::remove.str(str[](a!) self, str el) -> ()
prim::TimePoint() -> (int)
aten::wait(Future(t) self) -> (t)
onnx::Shape(Tensor t) -> (Tensor)
onnx::Reshape(Tensor input, Tensor shape) -> (Tensor)
prim::AddStatValue(str key, int val) -> ()
aten::cuda(Tensor(a) self) -> (Tensor(b|a))
aten::manual_seed(int seed) -> ()
aten::cpu(Tensor(a) self) -> (Tensor(b|a))
prim::name(Tensor a) -> (str?)
prim::is_meta(Tensor a) -> (bool)
prim::is_quantized(Tensor a) -> (bool)
prim::is_mkldnn(Tensor a) -> (bool)
prim::grad(Tensor a) -> (Tensor(*))
aten::device(str a) -> (Device)
aten::save(t item, str filename) -> ()
prim::BailoutTemplate() -> (int)
prim::index(Device self) -> (int?)
prim::profile(...) -> (...)
aten::dict.str((str, tVal)[] inputs) -> (Dict(str, tVal))
aten::dict.int((int, tVal)[] inputs) -> (Dict(int, tVal))
aten::dict.bool((bool, tVal)[] inputs) -> (Dict(bool, tVal))
aten::dict.float((float, tVal)[] inputs) -> (Dict(float, tVal))
aten::dict.Tensor((Tensor, tVal)[] inputs) -> (Dict(Tensor, tVal))
aten::dict() -> (Dict(str, Tensor))
aten::items.str(Dict(str, t) self) -> ((str, t)[])
aten::items.int(Dict(int, t) self) -> ((int, t)[])
aten::items.bool(Dict(bool, t) self) -> ((bool, t)[])
aten::items.float(Dict(float, t) self) -> ((float, t)[])
aten::items.Tensor(Dict(Tensor, t) self) -> ((Tensor, t)[])
aten::_unwrap_optional(t(a)? optional) -> (t(a))
aten::update.str(Dict(str, t)(a!) self, Dict(str, t)(a!) to_add) -> ()
aten::update.int(Dict(int, t)(a!) self, Dict(int, t)(a!) to_add) -> ()
aten::update.bool(Dict(bool, t)(a!) self, Dict(bool, t)(a!) to_add) -> ()
aten::update.float(Dict(float, t)(a!) self, Dict(float, t)(a!) to_add) -> ()
aten::update.Tensor(Dict(Tensor, t)(a!) self, Dict(Tensor, t)(a!) to_add) -> ()
aten::is_scripting() -> (bool)
aten::popitem.str(Dict(str, t)(a!) self) -> ((str, t))
aten::popitem.int(Dict(int, t)(a!) self) -> ((int, t))
aten::popitem.bool(Dict(bool, t)(a!) self) -> ((bool, t))
aten::popitem.float(Dict(float, t)(a!) self) -> ((float, t))
aten::popitem.Tensor(Dict(Tensor, t)(a!) self) -> ((Tensor, t))
aten::setdefault.str(Dict(str, t)(a!) self, str(b -> *) key, t(c -> *) default_value) -> (t(*))
aten::setdefault.int(Dict(int, t)(a!) self, int(b -> *) key, t(c -> *) default_value) -> (t(*))
aten::setdefault.bool(Dict(bool, t)(a!) self, bool(b -> *) key, t(c -> *) default_value) -> (t(*))
aten::setdefault.float(Dict(float, t)(a!) self, float(b -> *) key, t(c -> *) default_value) -> (t(*))
aten::setdefault.Tensor(Dict(Tensor, t)(a!) self, Tensor(b -> *) key, t(c -> *) default_value) -> (t(*))
aten::__round_to_zero_floordiv.int(int a, int b) -> (int)
aten::get.str(Dict(str, t) self, str key) -> (t(*)?)
aten::get.default_str(Dict(str, t) self, str key, t default_value) -> (t(*))
aten::get.int(Dict(int, t) self, int key) -> (t(*)?)
aten::get.default_int(Dict(int, t) self, int key, t default_value) -> (t(*))
aten::get.bool(Dict(bool, t) self, bool key) -> (t(*)?)
aten::get.default_bool(Dict(bool, t) self, bool key, t default_value) -> (t(*))
aten::get.float(Dict(float, t) self, float key) -> (t(*)?)
aten::get.default_float(Dict(float, t) self, float key, t default_value) -> (t(*))
aten::get.Tensor(Dict(Tensor, t) self, Tensor key) -> (t(*)?)
aten::get.default_Tensor(Dict(Tensor, t) self, Tensor key, t default_value) -> (t(*))
aten::keys.str(Dict(str, t) self) -> (str[](*))
aten::keys.int(Dict(int, t) self) -> (int[](*))
aten::keys.bool(Dict(bool, t) self) -> (bool[](*))
aten::keys.float(Dict(float, t) self) -> (float[](*))
aten::keys.Tensor(Dict(Tensor, t) self) -> (Tensor[](*))
aten::fabs.int(int a) -> (float)
aten::fabs.float(float a) -> (float)
aten::fabs.Scalar(Scalar a) -> (Scalar)
prim::is_cuda(Tensor a) -> (bool)
aten::__contains__.str_list(str[] l, str item) -> (bool)
aten::__contains__.str(Dict(str, t) dict, str key) -> (bool)
aten::__contains__.int(Dict(int, t) dict, int key) -> (bool)
aten::__contains__.bool(Dict(bool, t) dict, bool key) -> (bool)
aten::__contains__.float(Dict(float, t) dict, float key) -> (bool)
aten::__contains__.Tensor(Dict(Tensor, t) dict, Tensor key) -> (bool)
aten::__contains__.int_list(int[] l, int item) -> (bool)
aten::__contains__.float_list(float[] l, float item) -> (bool)
aten::ord(str string) -> (int)
prim::type(Device self) -> (str)
aten::floordiv.int(int a, int b) -> (int)
aten::floordiv.float(float a, float b) -> (float)
aten::floordiv.int_float(int a, float b) -> (float)
aten::floordiv.float_int(float a, int b) -> (float)
aten::floordiv(Scalar a, Scalar b) -> (Scalar)
aten::len.t(t[] a) -> (int)
aten::len.Tensor(Tensor t) -> (int)
aten::len.str(str s) -> (int)
aten::len.Dict_str(Dict(str, t) self) -> (int)
aten::len.Dict_int(Dict(int, t) self) -> (int)
aten::len.Dict_bool(Dict(bool, t) self) -> (int)
aten::len.Dict_float(Dict(float, t) self) -> (int)
aten::len.Dict_Tensor(Dict(Tensor, t) self) -> (int)
aten::len.any(Any[] a) -> (int)
aten::pop.t(t[](a!) self, int idx=-1) -> (t(*))
aten::pop.Dict_str(Dict(str, t)(a!) self, str key) -> (t(*))
aten::pop.Dict_default_str(Dict(str, t)(a!) self, str key, t default_value) -> (t(*))
aten::pop.Dict_int(Dict(int, t)(a!) self, int key) -> (t(*))
aten::pop.Dict_default_int(Dict(int, t)(a!) self, int key, t default_value) -> (t(*))
aten::pop.Dict_bool(Dict(bool, t)(a!) self, bool key) -> (t(*))
aten::pop.Dict_default_bool(Dict(bool, t)(a!) self, bool key, t default_value) -> (t(*))
aten::pop.Dict_float(Dict(float, t)(a!) self, float key) -> (t(*))
aten::pop.Dict_default_float(Dict(float, t)(a!) self, float key, t default_value) -> (t(*))
aten::pop.Dict_Tensor(Dict(Tensor, t)(a!) self, Tensor key) -> (t(*))
aten::pop.Dict_default_Tensor(Dict(Tensor, t)(a!) self, Tensor key, t default_value) -> (t(*))
aten::insert.t(t[](a!) self, int idx, t(b -> *) el) -> ()
aten::clear.t(t[](a!) self) -> ()
aten::clear.str(Dict(str, t)(a!) self) -> ()
aten::clear.int(Dict(int, t)(a!) self) -> ()
aten::clear.bool(Dict(bool, t)(a!) self) -> ()
aten::clear.float(Dict(float, t)(a!) self) -> ()
aten::clear.Tensor(Dict(Tensor, t)(a!) self) -> ()
aten::_set_item.t(t[](a!) l, int idx, t(b -> *) el) -> (t[](a!))
aten::_set_item.str(Dict(str, t)(a!) l, str(b -> *) idx, t(c -> *) v) -> ()
aten::_set_item.int(Dict(int, t)(a!) l, int(b -> *) idx, t(c -> *) v) -> ()
aten::_set_item.bool(Dict(bool, t)(a!) l, bool(b -> *) idx, t(c -> *) v) -> ()
aten::_set_item.float(Dict(float, t)(a!) l, float(b -> *) idx, t(c -> *) v) -> ()
aten::_set_item.Tensor(Dict(Tensor, t)(a!) l, Tensor(b -> *) idx, t(c -> *) v) -> ()
aten::local_value(RRef(t) self) -> (t(*))
aten::copy.t(t[](a) self) -> (t[])
aten::copy.Dict_str(Dict(str, t)(a) self) -> (Dict(str, t))
aten::copy.Dict_int(Dict(int, t)(a) self) -> (Dict(int, t))
aten::copy.Dict_bool(Dict(bool, t)(a) self) -> (Dict(bool, t))
aten::copy.Dict_float(Dict(float, t)(a) self) -> (Dict(float, t))
aten::copy.Dict_Tensor(Dict(Tensor, t)(a) self) -> (Dict(Tensor, t))
aten::sorted.int(int[](a) input) -> (int[])
aten::sorted.float(float[](a) input) -> (float[])
aten::sorted.Tensor(Tensor[](a) input) -> (Tensor[])
aten::sorted.bool(bool[](a) input) -> (bool[])
aten::sorted.str(str[](a) input) -> (str[])
aten::sorted.any(t[](a) self) -> (t[])
aten::extend.t(t[](a!) self, t[] other) -> ()
aten::warn(str message, int stacklevel=2) -> ()
aten::reverse.t(t[](a!) self) -> ()
aten::upper(str self) -> (str)
aten::append.t(t[](a!) self, t(c -> *) el) -> (t[](a!))
aten::__getitem__.t(t[](a) list, int idx) -> (t(*))
aten::__getitem__.str(str s, int index) -> (str)
aten::__getitem__.Dict_str(Dict(str, t) self, str key) -> (t(*))
aten::__getitem__.Dict_int(Dict(int, t) self, int key) -> (t(*))
aten::__getitem__.Dict_bool(Dict(bool, t) self, bool key) -> (t(*))
aten::__getitem__.Dict_float(Dict(float, t) self, float key) -> (t(*))
aten::__getitem__.Dict_Tensor(Dict(Tensor, t) self, Tensor key) -> (t(*))
aten::is_contiguous(Tensor self) -> (bool)
aten::storage_offset(Tensor self) -> (int)
aten::get_device(Tensor self) -> (int)
aten::dim(Tensor self) -> (int)
aten::numel(Tensor self) -> (int)
aten::element_size(Tensor self) -> (int)
aten::to_here(RRef(t) self, float timeout=60.) -> (t(*))
aten::__isnot__(t1 self, t2 obj) -> (bool)
_TorchScriptTesting::take_an_instance_inferred(__torch__.torch.classes._TorchScriptTesting._PickleTester _0) -> (Tensor _0)
aten::__is__(t1 self, t2 obj) -> (bool)
_TorchScriptTesting::take_an_instance(__torch__.torch.classes._TorchScriptTesting._PickleTester x) -> (Tensor Y)
aten::__not__(bool self) -> (bool)
prim::unchecked_unwrap_optional(t(a)? optional) -> (t(a))
prim::is_sparse(Tensor a) -> (bool)
prim::RaiseException(str msg) -> ()
aten::format(str self, ...) -> (str)
aten::Bool.Tensor(Tensor a) -> (bool)
aten::Bool.int(int a) -> (bool)
aten::Bool.float(float a) -> (bool)
prim::unchecked_cast(t x) -> (t)
prim::data(Tensor(a) a) -> (Tensor(a))
aten::__derive_index(int index, int start, int step) -> (int)
aten::lower(str self) -> (str)
aten::__range_length(int lo, int hi, int step) -> (int)
aten::list(str t) -> (str[])
aten::list.t(t[] l) -> (t[])
aten::_size_if_not_equal(int[] self_size, int[] other_size) -> (int[]?)
static::mul.a(Tensor a, Tensor b) -> (Tensor)
static::mul.b(Tensor a, int b) -> (Tensor)
aten::_grad_sum_to_size(Tensor(a) self, int[]? size) -> (Tensor(a))
static::add(Tensor a, Tensor b) -> (Tensor)
prim::tolist(...) -> (...)
profiler::_record_function_exit(Tensor _0) -> ()
profiler::_record_function_enter(str _0) -> (Tensor _0)
prim::rangelist(int n) -> (int[])
_caffe2::GatherRanges(Tensor data, Tensor ranges, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor, Tensor)
_caffe2::LengthsMax(Tensor data, Tensor lengths, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor)
_caffe2::LengthsMean(Tensor data, Tensor lengths, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor)
_caffe2::LengthsSum(Tensor data, Tensor lengths, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor)
aten::divmod.int(int x, int y) -> (int, int)
aten::divmod.float(float x, float y) -> (float, float)
aten::divmod.int_float(int x, float y) -> (float, float)
aten::divmod.float_int(float x, int y) -> (float, float)
__caffe2::RoIAlignRotated(Tensor features, Tensor rois, str order, float spatial_scale, int pooled_h, int pooled_w, int sampling_ratio, bool aligned, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor)
prim::abs.int(int a) -> (int)
prim::abs.float(float a) -> (float)
prim::abs.Scalar(Scalar a) -> (Scalar)
prim::abs(Tensor x) -> (Tensor)
_caffe2::RoIAlignRotated(Tensor features, Tensor rois, str order, float spatial_scale, int pooled_h, int pooled_w, int sampling_ratio, bool aligned, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor)
prim::max.int(int a, int b) -> (int)
prim::max.float(float a, float b) -> (float)
prim::max.int_float(int a, float b) -> (float)
prim::max.float_int(float a, int b) -> (float)
prim::max(Scalar a, Scalar b) -> (Scalar)
prim::max.int_list(int[] l, int[] r) -> (int[])
prim::max.self_int(int[] self) -> (int)
prim::max.float_list(float[] l, float[] r) -> (float[])
prim::max.self_float(float[] self) -> (float)
prim::max.bool_list(bool[] l, bool[] r) -> (bool[])
prim::max.self_bool(bool[] self) -> (bool)
__caffe2::RoIAlign(Tensor features, Tensor rois, str order, float spatial_scale, int pooled_h, int pooled_w, int sampling_ratio, bool aligned, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor)
prim::min.int(int a, int b) -> (int)
prim::min.float(float a, float b) -> (float)
prim::min.int_float(int a, float b) -> (float)
prim::min.float_int(float a, int b) -> (float)
prim::min(Scalar a, Scalar b) -> (Scalar)
prim::min.int_list(int[] l, int[] r) -> (int[])
prim::min.self_int(int[] self) -> (int)
prim::min.float_list(float[] l, float[] r) -> (float[])
prim::min.self_float(float[] self) -> (float)
prim::min.bool_list(bool[] l, bool[] r) -> (bool[])
prim::min.self_bool(bool[] self) -> (bool)
_caffe2::RoIAlign(Tensor features, Tensor rois, str order, float spatial_scale, int pooled_h, int pooled_w, int sampling_ratio, bool aligned, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor)
prim::ConstantChunk(...) -> (...)
_caffe2::ResizeNearest3D(Tensor X, str order, float temporal_scale, float width_scale, float height_scale, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor Y)
prim::TypeCheck(...) -> (...)
_caffe2::Percentile(Tensor original_values, Tensor value_to_pct, Tensor lengths, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor percentile_values)
prim::BailOut(...) -> (Tensor(a))
_caffe2::BatchBucketOneHot(Tensor data, Tensor lengths, Tensor boundaries, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output)
prim::Guard(Tensor(a) t) -> (Tensor(a))
_caffe2::MergeIdLists(Tensor[] lengths_and_values, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor merged_lengths, Tensor merged_values)
aten::backward(Tensor self, Tensor? gradient=None, bool? retain_graph=None, bool create_graph=False) -> ()
aten::backward.TensorList(Tensor[] tensors, Tensor?[]? grad_tensors=None, bool? retain_graph=None, bool create_graph=False) -> ()
_caffe2::Logit(Tensor X, float eps=9.9999999999999995e-07, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor Y)
aten::grad(Tensor[] outputs, Tensor[] inputs, Tensor?[]? grad_outputs=None, bool? retain_graph=None, bool create_graph=False, bool allow_unused=False) -> (Tensor?[])
_caffe2::LayerNorm(Tensor X, Tensor? gamma, Tensor? beta, int axis=1, float epsilon=1.0000000000000001e-05, bool elementwise_affine=False, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor Y, Tensor mean, Tensor std)
_caffe2::InferenceLSTM(Tensor[] input_list, int num_layers, bool has_biases, bool batch_first, bool bidirectional, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output, Tensor hidden, Tensor cell)
prim::AutogradAdd(Any a, Any b) -> (Any)
_caffe2::IndexHash(Tensor indices, int seed, int modulo, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor hashed_indices)
prim::MakeTestTensor() -> (Tensor)
__caffe2::HeatmapMaxKeypoint(Tensor heatmaps, Tensor bboxes_in, bool should_output_softmax=True, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor keypoints)
prim::requires_grad(Tensor a) -> (bool)
_caffe2::HeatmapMaxKeypoint(Tensor heatmaps, Tensor bboxes_in, bool should_output_softmax=True, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor keypoints)
prim::id(AnyClassType? x) -> (int)
_caffe2::GenerateProposals(Tensor scores, Tensor bbox_deltas, Tensor im_info, Tensor anchors, float spatial_scale, int pre_nms_topN, int post_nms_topN, float nms_thresh, float min_size, bool angle_bound_on, int angle_bound_lo, int angle_bound_hi, float clip_angle_thresh, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output_0, Tensor output_1)
prim::layout(Tensor a) -> (int)
__caffe2::GenerateProposals(Tensor scores, Tensor bbox_deltas, Tensor im_info, Tensor anchors, float spatial_scale, int pre_nms_topN, int post_nms_topN, float nms_thresh, float min_size, bool angle_bound_on, int angle_bound_lo, int angle_bound_hi, float clip_angle_thresh, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output_0, Tensor output_1)
prim::dtype(Tensor a) -> (int)
_caffe2::Gelu(Tensor input, bool fast_gelu=False, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output)
prim::device(Tensor a) -> (Device)
_caffe2::Fused8BitRowwiseQuantizedToFloat(Tensor scale_bias_quantized_input, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor)
aten::Delete.t(t[](a!) self, int idx) -> ()
aten::Delete.Dict_str(Dict(str, t)(a!) self, str key) -> ()
aten::Delete.Dict_int(Dict(int, t)(a!) self, int key) -> ()
aten::Delete.Dict_bool(Dict(bool, t)(a!) self, bool key) -> ()
aten::Delete.Dict_float(Dict(float, t)(a!) self, float key) -> ()
aten::Delete.Dict_Tensor(Dict(Tensor, t)(a!) self, Tensor key) -> ()
_caffe2::DistributeFpnProposals(Tensor rois, int roi_canonical_scale, int roi_canonical_level, int roi_max_level, int roi_min_level, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor rois_fpn2, Tensor rois_fpn3, Tensor rois_fpn4, Tensor rois_fpn5, Tensor rois_idx_restore_int32)
aten::str(t elem) -> (str)
_caffe2::CollectRpnProposals(Tensor[] input_list, int rpn_max_level, int rpn_min_level, int rpn_post_nms_topN, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor rois)
aten::Float.Tensor(Tensor a) -> (float)
aten::Float.Scalar(Scalar a) -> (float)
aten::Float.int(int a) -> (float)
aten::Float.bool(bool a) -> (float)
aten::Float.str(str a) -> (float)
_caffe2::CollectAndDistributeFpnRpnProposals(Tensor[] input_list, int roi_canonical_scale, int roi_canonical_level, int roi_max_level, int roi_min_level, int rpn_max_level, int rpn_min_level, int rpn_post_nms_topN, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor rois, Tensor rois_fpn2, Tensor rois_fpn3, Tensor rois_fpn4, Tensor rois_fpn5, Tensor rois_idx_restore_int32)
aten::ScalarImplicit(Tensor a) -> (Scalar)
_caffe2::Bucketize(Tensor data, float[] boundaries, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output)
aten::IntImplicit(Tensor a) -> (int)
__caffe2::BoxWithNMSLimit(Tensor scores, Tensor boxes, Tensor batch_splits, float score_thresh, float nms, int detections_per_im, bool soft_nms_enabled, str soft_nms_method, float soft_nms_sigma, float soft_nms_min_score_thres, bool rotated, bool cls_agnostic_bbox_reg, bool input_boxes_include_bg_cls, bool output_classes_include_bg_cls, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor scores, Tensor boxes, Tensor classes, Tensor batch_splits, Tensor keeps, Tensor keeps_size)
aten::FloatImplicit(Tensor a) -> (float)
_caffe2::BoxWithNMSLimit(Tensor scores, Tensor boxes, Tensor batch_splits, float score_thresh, float nms, int detections_per_im, bool soft_nms_enabled, str soft_nms_method, float soft_nms_sigma, float soft_nms_min_score_thres, bool rotated, bool cls_agnostic_bbox_reg, bool input_boxes_include_bg_cls, bool output_classes_include_bg_cls, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor scores, Tensor boxes, Tensor classes, Tensor batch_splits, Tensor keeps, Tensor keeps_size)
_caffe2::BBoxTransform(Tensor rois, Tensor deltas, Tensor im_info, float[] weights, bool apply_scale, bool rotated, bool angle_bound_on, int angle_bound_lo, int angle_bound_hi, float clip_angle_thresh, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output_0, Tensor output_1)
_caffe2::BatchPermutation(Tensor X, Tensor indices, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor)
_caffe2::BatchBoxCox(Tensor data, Tensor lambda1, Tensor lambda2, int min_block_size=256, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor results)
prim::Uninitialized() -> (Any)
_caffe2::AliasWithName(Tensor input, str name, bool is_backward=False, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output)
prim::NumToTensor.Scalar(Scalar a) -> (Tensor)
prim::NumToTensor.bool(bool a) -> (Tensor)
aten::get_gradients(int context_id) -> (Dict(Tensor, Tensor))
__caffe2::BBoxTransform(Tensor rois, Tensor deltas, Tensor im_info, float[] weights, bool apply_scale, bool rotated, bool angle_bound_on, int angle_bound_lo, int angle_bound_hi, float clip_angle_thresh, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output_0, Tensor output_1)
aten::Int.Tensor(Tensor a) -> (int)
aten::Int.bool(bool a) -> (int)
aten::Int.float(float a) -> (int)
aten::Int.Scalar(Scalar a) -> (int)
aten::Int.str(str a) -> (int)
prim::StringIndex(str string, int index) -> (str)
aten::join(str self, str[] values) -> (str)
prim::EnumValue.int(AnyEnumType enum) -> (int)
prim::EnumValue.float(AnyEnumType enum) -> (float)
prim::EnumValue.str(AnyEnumType enum) -> (str)
aten::rsplit(str self, str separator=" ", int max=-1) -> (str[])
prim::EnumName(AnyEnumType enum) -> (str)
aten::rpartition(str self, str separator) -> (str, str, str)
aten::partition(str self, str separator) -> (str, str, str)
aten::replace(str self, str old, str new, int max=-1) -> (str)
aten::strip(str self, str chars=" \n\t\f\v") -> (str)
aten::rstrip(str self, str chars=" \n\t\f\v") -> (str)
prim::TupleIndex(Any tup, int i) -> (Any)
aten::lstrip(str self, str chars=" \n\t\f\v") -> (str)
prim::TupleUnpack(Any tup) -> (...)
aten::zfill(str self, int width) -> (str)
aten::rjust(str self, int width, str fillchar=" ") -> (str)
aten::ljust(str self, int width, str fillchar=" ") -> (str)
prim::AutogradAnyNonZero(...) -> (bool)
aten::isprintable(str self) -> (bool)
prim::AutogradZero() -> (Tensor)
aten::istitle(str self) -> (bool)
aten::isidentifier(str self) -> (bool)
aten::rindex(str self, str substr, int start=0, int end=-1) -> (int)
aten::rfind(str self, str substr, int start=0, int end=-1) -> (int)
aten::find(str self, str substr, int start=0, int end=-1) -> (int)
aten::expandtabs(str self, int tabsize=8) -> (str)
aten::startswith(str self, str substr, int start=0, int end=-1) -> (bool)
aten::endswith(str self, str substr, int start=0, int end=-1) -> (bool)
prim::IgnoredPythonOp(...) -> (None)
aten::count(str self, str substr, int start=0, int end=-1) -> (int)
aten::count.int(int[] self, int el) -> (int)
aten::count.float(float[] self, float el) -> (int)
aten::count.bool(bool[] self, bool el) -> (int)
aten::count.Tensor(Tensor[] self, Tensor el) -> (int)
aten::count.str(str[] self, str el) -> (int)
prim::PythonOp(...) -> (...)
aten::center(str self, int width, str fillchar=" ") -> (str)
prim::Print(...) -> ()
aten::title(str self) -> (str)
aten::capitalize(str self) -> (str)
aten::islower(str self) -> (bool)
aten::isupper(str self) -> (bool)
aten::splitlines(str self, bool keepends=False) -> (str[])
aten::_test_serialization_subcmul(Tensor self, Tensor other, Scalar alpha=1) -> (Tensor)
aten::ger(Tensor self, Tensor vec2) -> (Tensor)
aten::ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> (Tensor(a!))
aten::outer(Tensor self, Tensor vec2) -> (Tensor)
aten::outer.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> (Tensor(a!))
aten::isdecimal(str self) -> (bool)
aten::det(Tensor self) -> (Tensor)
aten::isnumeric(str self) -> (bool)
aten::linalg_det(Tensor self) -> (Tensor)
aten::fft(Tensor self, int signal_ndim, bool normalized=False) -> (Tensor)
aten::fft_fft(Tensor self) -> (Tensor)
aten::slow_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], *, Tensor(a!) out) -> (Tensor(a!))
aten::slow_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0]) -> (Tensor)
aten::thnn_conv_depthwise2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight) -> (Tensor(a!), Tensor(b!))
aten::thnn_conv_depthwise2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight)
aten::thnn_conv_depthwise2d_forward.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> (Tensor(a!))
aten::thnn_conv_depthwise2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> (Tensor)
aten::thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] dilation=[1, 1], *, Tensor(a!) out) -> (Tensor(a!))
aten::thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] dilation=[1, 1]) -> (Tensor)
aten::thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], *, Tensor(a!) out) -> (Tensor(a!))
aten::thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0]) -> (Tensor)
aten::softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> (Tensor(a!))
aten::softshrink(Tensor self, Scalar lambd=0.5) -> (Tensor)
aten::rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, bool self_is_result) -> (Tensor)
aten::log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::log_sigmoid(Tensor self) -> (Tensor)
aten::leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result) -> (Tensor)
aten::hardswish_(Tensor(a!) self) -> (Tensor(a!))
aten::hardswish.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::hardswish(Tensor self) -> (Tensor)
aten::hardsigmoid_(Tensor(a!) self) -> (Tensor(a!))
aten::elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> (Tensor(a!))
aten::elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> (Tensor(a!))
aten::elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> (Tensor)
aten::soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> (Tensor)
aten::_amp_update_scale(Tensor(a!) growth_tracker, Tensor current_scale, Tensor found_inf, float scale_growth_factor, float scale_backoff_factor, int growth_interval) -> (Tensor)
aten::_amp_non_finite_check_and_unscale_(Tensor(a!) self, Tensor(b!) found_inf, Tensor inv_scale) -> ()
aten::quantile.scalar_out(Tensor self, float q, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::quantile.scalar(Tensor self, float q, int? dim=None, bool keepdim=False) -> (Tensor)
aten::quantile.out(Tensor self, Tensor q, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::quantile(Tensor self, Tensor q, int? dim=None, bool keepdim=False) -> (Tensor)
aten::lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> (Tensor(a!))
aten::lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> (Tensor)
aten::qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)
aten::qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)
aten::solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU)
aten::solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)
aten::cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> (Tensor)
aten::cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::cholesky(Tensor self, bool upper=False) -> (Tensor)
aten::svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)
aten::svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)
aten::symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)
aten::symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)
aten::triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)
aten::triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)
aten::_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> (Tensor)
aten::__ixor__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::__ixor__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::__xor__.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::__xor__.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::__xor__.bool(bool a, bool b) -> (bool)
aten::__xor__.int(int a, int b) -> (int)
prim::FusionGroup(...) -> (...)
aten::bitwise_xor_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::bitwise_xor_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::__ior__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::__ior__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::__or__.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::__or__.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::__or__.bool(bool a, bool b) -> (bool)
aten::__or__.int(int a, int b) -> (int)
aten::bitwise_or_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::bitwise_or_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::__iand__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::__iand__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::__and__.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::__and__.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::__and__.bool(bool a, bool b) -> (bool)
aten::__and__.int(int a, int b) -> (int)
aten::bitwise_and_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::bitwise_and_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::ne_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::ne_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::eq_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::eq_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::ge_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::ge_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::le_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::le_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::gt_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::gt_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::lt_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::lt_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> (Tensor)
aten::scatter_add.dimname(Tensor self, str dim, Tensor index, Tensor src) -> (Tensor)
aten::scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> (Tensor)
aten::scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> (Tensor)
aten::scatter.dimname_src(Tensor self, str dim, Tensor index, Tensor src) -> (Tensor)
aten::scatter.dimname_value(Tensor self, str dim, Tensor index, Scalar value) -> (Tensor)
aten::index_add(Tensor self, int dim, Tensor index, Tensor source) -> (Tensor)
aten::index_add.dimname(Tensor self, str dim, Tensor index, Tensor source) -> (Tensor)
aten::masked_scatter(Tensor self, Tensor mask, Tensor source) -> (Tensor)
aten::_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)
aten::_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> (Tensor)
aten::_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)
prim::ChunkSizes(...) -> (...)
aten::quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor)
aten::quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor)
prim::BroadcastSizes(...) -> (int[])
aten::quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor)
aten::quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)
aten::rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor)
aten::rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor)
aten::gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor)
aten::lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)
aten::rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
aten::rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
aten::rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
aten::rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
aten::gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
aten::gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
aten::lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)
aten::lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)
aten::_thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
aten::_thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
aten::_thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)
aten::_thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
aten::_thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
aten::_thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)
aten::promote_types(int type1, int type2) -> (int)
aten::can_cast(int from, int to) -> (bool)
aten::combinations(Tensor self, int r=2, bool with_replacement=False) -> (Tensor)
aten::cartesian_prod(Tensor[] tensors) -> (Tensor)
aten::meshgrid(Tensor[] tensors) -> (Tensor[])
aten::_saturate_weight_to_fp16(Tensor weight) -> (Tensor)
aten::_choose_qparams_per_tensor(Tensor self, bool reduce_range=False) -> (float, int)
aten::_fake_quantize_learnable_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor, Tensor, Tensor)
aten::_fake_quantize_learnable_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor)
aten::fake_quantize_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor)
aten::fake_quantize_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor)
aten::_fake_quantize_learnable_per_tensor_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int quant_min, int quant_max) -> (Tensor, Tensor, Tensor)
aten::_fake_quantize_learnable_per_tensor_affine(Tensor self, Tensor scale, Tensor zero_point, int quant_min, int quant_max) -> (Tensor)
aten::fake_quantize_per_tensor_affine_backward(Tensor grad, Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> (Tensor)
aten::fake_quantize_per_tensor_affine(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> (Tensor)
aten::to_mkldnn_backward(Tensor grad, Tensor input) -> (Tensor)
aten::to_dense_backward(Tensor grad, Tensor input) -> (Tensor)
aten::_validate_sparse_coo_tensor_args(Tensor indices, Tensor values, int[] size) -> ()
aten::_sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
aten::_sparse_sum(Tensor self) -> (Tensor)
aten::_sparse_sum.dtype(Tensor self, *, int dtype) -> (Tensor)
aten::_sparse_sum.dim(Tensor self, int[1] dim) -> (Tensor)
aten::_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, int dtype) -> (Tensor)
aten::_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)
aten::_weight_norm_cuda_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)
aten::_weight_norm_cuda_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor)
aten::_weight_norm(Tensor v, Tensor g, int dim=0) -> (Tensor)
aten::norm_except_dim(Tensor v, int pow=2, int dim=0) -> (Tensor)
aten::_s_where(Tensor condition, Tensor self, Tensor other) -> (Tensor)
aten::where.self(Tensor condition, Tensor self, Tensor other) -> (Tensor)
aten::where.ScalarSelf(Tensor condition, Scalar self, Tensor other) -> (Tensor)
aten::where.ScalarOther(Tensor condition, Tensor self, Scalar other) -> (Tensor)
aten::where.Scalar(Tensor condition, Scalar self, Scalar other) -> (Tensor)
aten::where(Tensor condition) -> (Tensor[])
aten::unsqueeze_(Tensor(a!) self, int dim) -> (Tensor(a!))
aten::_unsafe_view(Tensor self, int[] size) -> (Tensor)
aten::_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> (bool)
aten::type_as(Tensor self, Tensor other) -> (Tensor)
aten::fix_(Tensor(a!) self) -> (Tensor(a!))
aten::fix(Tensor self) -> (Tensor)
aten::fix.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> (Tensor)
aten::trapz.x(Tensor y, Tensor x, *, int dim=-1) -> (Tensor)
aten::trapz.dx(Tensor y, *, float dx=1., int dim=-1) -> (Tensor)
aten::rot90(Tensor self, int k=1, int[] dims=[0, 1]) -> (Tensor)
aten::flipud(Tensor self) -> (Tensor)
aten::fliplr(Tensor self) -> (Tensor)
aten::one_hot(Tensor self, int num_classes=-1) -> (Tensor)
aten::transpose_(Tensor(a!) self, int dim0, int dim1) -> (Tensor(a!))
aten::owner(RRef(t) self) -> (__torch__.torch.classes.dist_rpc.WorkerInfo)
aten::t_(Tensor(a!) self) -> (Tensor(a!))
aten::sum_to_size(Tensor self, int[] size) -> (Tensor)
aten::nansum(Tensor self, *, int? dtype=None) -> (Tensor)
aten::nansum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
aten::nansum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
aten::istft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool center=True, bool normalized=False, bool onesided=True, int? length=None) -> (Tensor)
aten::stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> (Tensor)
aten::dstack(Tensor[] tensors) -> (Tensor)
aten::dstack.out(Tensor[] tensors, *, Tensor(a!) out) -> (Tensor(a!))
aten::vstack(Tensor[] tensors) -> (Tensor)
aten::vstack.out(Tensor[] tensors, *, Tensor(a!) out) -> (Tensor(a!))
aten::hstack(Tensor[] tensors) -> (Tensor)
aten::hstack.out(Tensor[] tensors, *, Tensor(a!) out) -> (Tensor(a!))
aten::squeeze_(Tensor(a!) self) -> (Tensor(a!))
aten::squeeze_.dim(Tensor(a!) self, int dim) -> (Tensor(a!))
aten::squeeze_.dimname(Tensor(a!) self, str dim) -> (Tensor(a!))
aten::smm(Tensor self, Tensor mat2) -> (Tensor)
aten::slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)
aten::silu_backward(Tensor grad_output, Tensor self) -> (Tensor)
aten::silu_(Tensor(a!) self) -> (Tensor(a!))
aten::silu(Tensor self) -> (Tensor)
aten::silu.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::celu_(Tensor(a!) self, Scalar alpha=1.) -> (Tensor(a!))
aten::celu(Tensor self, Scalar alpha=1.) -> (Tensor)
aten::selu_(Tensor(a!) self) -> (Tensor(a!))
aten::selu(Tensor self) -> (Tensor)
aten::hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> (Tensor)
aten::hardshrink(Tensor self, Scalar lambd=0.5) -> (Tensor)
aten::rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None) -> (Tensor(a!))
aten::rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None) -> (Tensor)
aten::repeat(Tensor self, int[] repeats) -> (Tensor)
aten::pinverse(Tensor self, float rcond=1.0000000000000001e-15) -> (Tensor)
aten::pin_memory(Tensor(a) self) -> (Tensor(a))
aten::pixel_shuffle(Tensor self, int upscale_factor) -> (Tensor)
aten::_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> (Tensor)
aten::_pdist_forward(Tensor self, float p=2.) -> (Tensor)
aten::_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> (Tensor)
aten::_euclidean_dist(Tensor x1, Tensor x2) -> (Tensor)
aten::pairwise_distance(Tensor x1, Tensor x2, float p=2., float eps=9.9999999999999995e-07, bool keepdim=False) -> (Tensor)
aten::_nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> (Tensor)
aten::_nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> (Tensor)
aten::_nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
aten::_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=[1, 1]) -> (Tensor)
aten::_nnpack_available() -> (bool)
aten::is_vulkan_available() -> (bool)
aten::batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu) -> (Tensor)
aten::batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)
aten::batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, Tensor counts) -> (Tensor, Tensor)
aten::batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)
aten::batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> (Tensor)
aten::batch_norm_elemt.out(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps, *, Tensor(a!) out) -> (Tensor(a!))
aten::batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)
aten::mvlgamma_(Tensor(a!) self, int p) -> (Tensor(a!))
aten::mvlgamma(Tensor self, int p) -> (Tensor)
aten::_sparse_mm(Tensor sparse, Tensor dense) -> (Tensor)
aten::miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])
aten::miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
aten::miopen_depthwise_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::miopen_depthwise_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
aten::miopen_depthwise_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::miopen_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::miopen_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::miopen_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
aten::miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::miopen_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::miopen_convolution_backward_bias(Tensor grad_output) -> (Tensor)
aten::miopen_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
aten::miopen_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)
aten::miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)
aten::mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
aten::mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)
aten::mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor)
aten::mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> (Tensor)
aten::min_values(Tensor self, int[1] dim, bool keepdim=False) -> (Tensor)
aten::min_values.names(Tensor self, str[1] dim, bool keepdim=False) -> (Tensor)
aten::max_values(Tensor self, int[1] dim, bool keepdim=False) -> (Tensor)
aten::max_values.names(Tensor self, str[1] dim, bool keepdim=False) -> (Tensor)
aten::matrix_exp_backward(Tensor self, Tensor grad) -> (Tensor)
aten::matrix_exp(Tensor self) -> (Tensor)
aten::matrix_power(Tensor self, int n) -> (Tensor)
aten::matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> (Tensor)
aten::matrix_rank(Tensor self, bool symmetric=False) -> (Tensor)
aten::logdet(Tensor self) -> (Tensor)
aten::fbgemm_pack_quantized_matrix(Tensor input) -> (Tensor)
aten::fbgemm_pack_quantized_matrix.KN(Tensor input, int K, int N) -> (Tensor)
aten::fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> (Tensor)
aten::fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> (Tensor)
aten::fbgemm_pack_gemm_matrix_fp16(Tensor input) -> (Tensor)
aten::fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)
aten::fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> (Tensor)
aten::fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> (Tensor)
aten::isreal(Tensor self) -> (Tensor)
aten::is_distributed(Tensor self) -> (bool)
aten::isclose(Tensor self, Tensor other, float rtol=1.0000000000000001e-05, float atol=1e-08, bool equal_nan=False) -> (Tensor)
aten::inverse(Tensor self) -> (Tensor)
aten::inverse.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> (Tensor)
aten::_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> (Tensor(a!))
aten::_index_put_impl_.hacked_twin(Tensor(a!) self, Tensor[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> (Tensor(a!))
aten::index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> (Tensor(a!))
aten::index_put_.hacked_twin(Tensor(a!) self, Tensor[] indices, Tensor values, bool accumulate=False) -> (Tensor(a!))
aten::index_copy(Tensor self, int dim, Tensor index, Tensor source) -> (Tensor)
aten::index_copy.dimname(Tensor self, str dim, Tensor index, Tensor source) -> (Tensor)
aten::index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> (Tensor(a!))
aten::index_copy_.dimname(Tensor(a!) self, str dim, Tensor index, Tensor source) -> (Tensor(a!))
aten::index.Tensor(Tensor self, Tensor?[] indices) -> (Tensor)
aten::index.str(str self, str substr, int start=0, int end=-1) -> (int)
aten::index.Tensor_hacked_twin(Tensor self, Tensor[] indices) -> (Tensor)
aten::index.list_int(int[] self, int el) -> (int)
aten::index.list_float(float[] self, float el) -> (int)
aten::index.list_bool(bool[] self, bool el) -> (int)
aten::index.list_Tensor(Tensor[] self, Tensor el) -> (int)
aten::index.list_str(str[] self, str el) -> (int)
aten::_cufft_clear_plan_cache(int device_index) -> ()
aten::_cufft_set_plan_cache_max_size(int device_index, int max_size) -> ()
aten::_cufft_get_plan_cache_max_size(int device_index) -> (int)
aten::_cufft_get_plan_cache_size(int device_index) -> (int)
aten::irfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True, int[] signal_sizes=[]) -> (Tensor)
aten::rfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True) -> (Tensor)
aten::ifft(Tensor self, int signal_ndim, bool normalized=False) -> (Tensor)
aten::_grid_sampler_2d_cpu_fallback_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)
aten::_grid_sampler_2d_cpu_fallback(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor)
aten::grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor)
aten::lcm_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::lcm.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::lcm(Tensor self, Tensor other) -> (Tensor)
aten::gcd_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::gcd.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::gcd(Tensor self, Tensor other) -> (Tensor)
aten::gcd.int(int a, int b) -> (int)
aten::new_zeros(Tensor self, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::new_full(Tensor self, int[] size, Scalar fill_value, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::new_empty(Tensor self, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> (Tensor)
aten::_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights) -> (Tensor)
aten::embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)
aten::embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> (Tensor)
aten::embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> (Tensor)
aten::embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> (Tensor)
aten::einsum(str equation, Tensor[] tensors) -> (Tensor)
aten::fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> (Tensor(a!))
aten::diagflat(Tensor self, int offset=0) -> (Tensor)
aten::diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> (Tensor)
aten::ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=1, bool zero_infinity=False) -> (Tensor)
aten::ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=1, bool zero_infinity=False) -> (Tensor)
aten::cudnn_grid_sampler_backward(Tensor self, Tensor grid, Tensor grad_output) -> (Tensor grad_self, Tensor grad_grid)
aten::cudnn_grid_sampler(Tensor self, Tensor grid) -> (Tensor output)
quantized::celu(Tensor self, float output_scale, int output_zero_point, Scalar alpha=1) -> (Tensor)
aten::multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=1) -> (Tensor)
aten::multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))
quantized::conv3d_groups(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int)
aten::mul_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::mul_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::mul_.t(t[](a!) l, int n) -> (t[](a!))
quantized::conv3d_padding(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int[])
quantized::conv3d_stride(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int[])
aten::mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> (Tensor)
quantized::conv2d_stride(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int[])
quantized::conv3d_unpack(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (Tensor unpacked_weights, Tensor? B_origin)
_quantized::conv2d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv2dPackedParamsBase)
quantized::conv3d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv3dPackedParamsBase)
quantized::conv1d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv2dPackedParamsBase)
quantized::conv_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv2dPackedParamsBase)
_quantized::conv2d_relu(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
_quantized::conv2d(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
quantized::conv3d_relu.new(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
quantized::conv3d_relu(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase weight, int[] stride, int[] padding, int[] dilation, int groups, float output_scale, int output_zero_point) -> (Tensor)
quantized::conv3d.new(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
quantized::conv3d(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase weight, int[] stride, int[] padding, int[] dilation, int groups, float output_scale, int output_zero_point) -> (Tensor)
quantized::conv2d_relu.new(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
quantized::conv2d_relu(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase weight, int[] stride, int[] padding, int[] dilation, int groups, float output_scale, int output_zero_point) -> (Tensor)
quantized::conv2d.new(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
quantized::conv2d(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase weight, int[] stride, int[] padding, int[] dilation, int groups, float output_scale, int output_zero_point) -> (Tensor)
quantized::conv1d_relu(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
quantized::conv1d(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
quantized::cat_relu_out(Tensor[] qx, int dim, Tensor(a!) out) -> (Tensor(a!))
quantized::cat_out(Tensor[] qx, int dim, Tensor(a!) out) -> (Tensor(a!))
quantized::cat_relu(Tensor[] qx, int dim, float? scale, int? zero_point) -> (Tensor)
quantized::cat(Tensor[] qx, int dim, float? scale, int? zero_point) -> (Tensor)
quantized::clamp(Tensor qx, Scalar? min, Scalar? max) -> (Tensor qy)
aten::min(Tensor self) -> (Tensor)
aten::min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
aten::min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::min.names_dim(Tensor self, str dim, bool keepdim=False) -> (Tensor values, Tensor indices)
aten::min.names_dim_min(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::min.other(Tensor self, Tensor other) -> (Tensor)
quantized::batch_norm3d_relu(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
quantized::batch_norm3d(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
aten::median(Tensor self) -> (Tensor)
aten::median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
aten::median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::median.names_dim(Tensor self, str dim, bool keepdim=False) -> (Tensor values, Tensor indices)
aten::median.names_dim_values(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
quantized::batch_norm2d_relu(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
aten::mean(Tensor self, *, int? dtype=None) -> (Tensor)
aten::mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
aten::mean.names_dim(Tensor self, str[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
aten::mean.names_out(Tensor self, str[1] dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
aten::mean.out(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
quantized::batch_norm2d(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
quantized::batch_norm1d(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
aten::max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::max_unpool3d_backward(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> (Tensor)
_quantized::add(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc)
aten::max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::max_unpool2d_backward(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size) -> (Tensor)
quantized::add_scalar_relu_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
quantized::add_scalar_relu_out.Tensor(Tensor qa, Tensor b, Tensor(a!) out) -> (Tensor(a!) out)
quantized::add_scalar_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
quantized::add_scalar_out.Tensor(Tensor qa, Tensor b, Tensor(a!) out) -> (Tensor(a!) out)
aten::max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> (Tensor)
quantized::add_scalar_relu(Tensor qa, Scalar b) -> (Tensor qc)
quantized::add_scalar_relu.Tensor(Tensor qa, Tensor b) -> (Tensor qc)
aten::max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1], bool ceil_mode=False) -> (Tensor, Tensor)
aten::max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1], bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
quantized::add_scalar(Tensor qa, Scalar b) -> (Tensor qc)
quantized::add_scalar.Tensor(Tensor qa, Tensor b) -> (Tensor qc)
aten::max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1], bool ceil_mode=False) -> (Tensor)
quantized::add_relu_out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
quantized::add_out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
aten::max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> (Tensor)
quantized::add_relu(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc)
quantized::add_relu.out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
quantized::add_relu.Scalar(Tensor qa, Scalar b) -> (Tensor qc)
quantized::add_relu.Scalar_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
aten::max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor, Tensor)
aten::max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
quantized::quantized_rnn_relu_cell_dynamic(Tensor input, Tensor hx, __torch__.torch.classes.quantized.LinearPackedParamsBase w_ih, __torch__.torch.classes.quantized.LinearPackedParamsBase w_hh, Tensor b_ih, Tensor b_hh) -> (Tensor)
aten::max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=[0], int[1] dilation=[1], bool ceil_mode=False) -> (Tensor)
quantized::quantized_gru_cell_dynamic(Tensor input, Tensor hx, __torch__.torch.classes.quantized.LinearPackedParamsBase w_ih, __torch__.torch.classes.quantized.LinearPackedParamsBase w_hh, Tensor b_ih, Tensor b_hh) -> (Tensor)
aten::max(Tensor self) -> (Tensor)
aten::max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
aten::max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
aten::max.names_dim(Tensor self, str dim, bool keepdim=False) -> (Tensor values, Tensor indices)
aten::max.names_dim_max(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
aten::max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::max.other(Tensor self, Tensor other) -> (Tensor)
aten::retain_grad(Tensor(a!) self) -> ()
aten::masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> (Tensor)
aten::masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> (Tensor)
aten::requires_grad_(Tensor(a!) self, bool requires_grad=True) -> (Tensor(a!))
aten::margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0., int reduction=1) -> (Tensor)
aten::data(Tensor self) -> (Tensor)
aten::lstsq.X(Tensor self, Tensor A, *, Tensor(a!) X, Tensor(b!) qr) -> (Tensor(a!) solution, Tensor(b!) QR)
aten::lstsq(Tensor self, Tensor A) -> (Tensor solution, Tensor QR)
aten::zeros_like(Tensor self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
aten::var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)
aten::var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
aten::var_mean.names_dim(Tensor self, str[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
aten::var(Tensor self, bool unbiased=True) -> (Tensor)
aten::var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor)
aten::var.names_dim(Tensor self, str[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor)
aten::var.names_out(Tensor self, str[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::unsafe_split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> (Tensor[])
aten::unsafe_split.Tensor(Tensor self, int split_size, int dim=0) -> (Tensor[])
aten::unsafe_chunk(Tensor self, int chunks, int dim=0) -> (Tensor[])
aten::true_divide_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::true_divide_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> (Tensor)
aten::logsumexp.names(Tensor self, str[1] dim, bool keepdim=False) -> (Tensor)
aten::logsumexp.names_out(Tensor self, str[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> (Tensor(a!))
aten::logit(Tensor self, float? eps=None) -> (Tensor)
aten::logit.out(Tensor self, float? eps=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::threshold(Tensor self, Scalar threshold, Scalar value) -> (Tensor)
aten::threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> (Tensor(a!))
aten::tanh_(Tensor(a!) self) -> (Tensor(a!))
aten::flatten.DimnameList(Tensor(a) self, str[] dims, str out_dim) -> (Tensor(a))
aten::flatten.named_out_dim(Tensor(a) self, int start_dim, int end_dim, str out_dim) -> (Tensor(a))
aten::flatten.using_ints(Tensor(a) self, int start_dim=0, int end_dim=-1) -> (Tensor(a))
aten::flatten.using_names(Tensor(a) self, str start_dim, str end_dim, str out_dim) -> (Tensor(a))
aten::tan_(Tensor(a!) self) -> (Tensor(a!))
aten::sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> (Tensor)
aten::sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> (Tensor)
aten::sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
aten::sub.int(int a, int b) -> (int)
aten::sub.float(float a, float b) -> (float)
aten::sub.int_float(int a, float b) -> (float)
aten::sub.float_int(float a, int b) -> (float)
aten::sub(Scalar a, Scalar b) -> (Scalar)
aten::_use_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank) -> (bool)
aten::square_(Tensor(a!) self) -> (Tensor(a!))
aten::logcumsumexp(Tensor self, int dim) -> (Tensor)
aten::logcumsumexp.dimname(Tensor self, str dim) -> (Tensor)
aten::logcumsumexp.dimname_out(Tensor self, str dim, *, Tensor(a!) out) -> (Tensor(a!))
aten::logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> (Tensor(a!))
aten::square(Tensor self) -> (Tensor)
aten::_sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> (Tensor)
aten::sinh_(Tensor(a!) self) -> (Tensor(a!))
aten::_log_softmax(Tensor self, int dim, bool half_to_float) -> (Tensor)
aten::sin_(Tensor(a!) self) -> (Tensor(a!))
aten::log_softmax.int(Tensor self, int dim, int? dtype=None) -> (Tensor)
aten::log_softmax.Dimname(Tensor self, str dim, *, int? dtype=None) -> (Tensor)
aten::signbit(Tensor self) -> (Tensor)
aten::signbit.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
aten::fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor)
aten::sign_(Tensor(a!) self) -> (Tensor(a!))
aten::log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))
aten::log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)
aten::round_(Tensor(a!) self) -> (Tensor(a!))
aten::result_type.Scalar(Tensor tensor, Scalar other) -> (int)
aten::result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> (int)
aten::result_type.Tensor(Tensor tensor, Tensor other) -> (int)
aten::result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> (int)
aten::resize_as_(Tensor(a!) self, Tensor the_template, *, int? memory_format=None) -> (Tensor(a!))
aten::_cholesky_solve_helper(Tensor self, Tensor A, bool upper) -> (Tensor)
aten::rename(Tensor(a) self, str[]? names) -> (Tensor(a))
aten::log1p(Tensor self) -> (Tensor)
aten::log1p.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::log1p.int(int a) -> (float)
aten::log1p.float(float a) -> (float)
aten::log1p.Scalar(Scalar a) -> (Scalar)
aten::relu_(Tensor(a!) self) -> (Tensor(a!))
aten::log10(Tensor self) -> (Tensor)
aten::log10.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::log10.int(int a) -> (float)
aten::log10.float(float a) -> (float)
aten::log10.Scalar(Scalar a) -> (Scalar)
aten::refine_names(Tensor(a) self, str[] names) -> (Tensor(a))
aten::log(Tensor self) -> (Tensor)
aten::log.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::log.int(int a) -> (float)
aten::log.float(float a) -> (float)
aten::log.Scalar(Scalar a) -> (Scalar)
aten::log.int_int(int a, int b) -> (float)
aten::log.float_float(float a, float b) -> (float)
aten::log.int_float(int a, float b) -> (float)
aten::log.float_int(float a, int b) -> (float)
aten::log.Scalar_Scalar(Scalar a, Scalar b) -> (float)
aten::reciprocal_(Tensor(a!) self) -> (Tensor(a!))
aten::linspace(Scalar start, Scalar end, int steps=100, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::linspace.out(Scalar start, Scalar end, int steps=100, *, Tensor(a!) out) -> (Tensor(a!))
aten::rad2deg(Tensor self) -> (Tensor)
aten::rad2deg.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::native_group_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int N, int C, int HxW, int group, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
aten::polygamma(int n, Tensor self) -> (Tensor)
aten::polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::triu_indices(int row, int col, int offset=0, *, int? dtype=4, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::ones_like(Tensor self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
quantized::threshold(Tensor qx, Scalar threshold, Scalar value) -> (Tensor qy)
aten::zero_(Tensor(a!) self) -> (Tensor(a!))
aten::nextafter_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::nextafter(Tensor self, Tensor other) -> (Tensor)
aten::nextafter.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
quantized::linear_prepack_fp16_legacy(Tensor W, Tensor? B=None) -> (Tensor W_prepack)
aten::ne.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
aten::ne.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::ne.int_list(int[] a, int[] b) -> (bool)
aten::ne.enum(AnyEnumType a, AnyEnumType b) -> (bool)
aten::ne.int(int a, int b) -> (bool)
aten::ne.float(float a, float b) -> (bool)
aten::ne.int_float(int a, float b) -> (bool)
aten::ne.float_int(float a, int b) -> (bool)
aten::ne(Scalar a, Scalar b) -> (bool)
aten::ne.str(str a, str b) -> (bool)
aten::ne.float_list(float[] a, float[] b) -> (bool)
aten::ne.Tensor_list(Tensor[] a, Tensor[] b) -> (bool)
aten::ne.bool_list(bool[] a, bool[] b) -> (bool)
aten::ne.str_list(str[] a, str[] b) -> (bool)
quantized::linear_prepack_legacy(Tensor W, Tensor? B=None) -> (Tensor W_prepack)
quantized::conv2d_dilation(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int[])
aten::mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)
aten::mode.dimname(Tensor self, str dim, bool keepdim=False) -> (Tensor values, Tensor indices)
aten::mode.dimname_out(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
quantized::conv1d_unpack(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (Tensor unpacked_weights, Tensor? B_origin)
quantized::batch_norm1d_relu(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
quantized::batch_norm_relu(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
aten::max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> (Tensor(a!))
aten::max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> (Tensor)
quantized::batch_norm(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
quantized::add(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc)
quantized::add.out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
quantized::add.Scalar(Tensor qa, Scalar b) -> (Tensor qc)
quantized::add.Scalar_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
aten::max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor)
quantized::quantized_lstm_cell_dynamic(Tensor input, Tensor[] hx, __torch__.torch.classes.quantized.LinearPackedParamsBase w_ih, __torch__.torch.classes.quantized.LinearPackedParamsBase w_hh, Tensor bias_ih, Tensor bias_hh) -> (Tensor, Tensor)
quantized::make_quantized_cell_params(Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh) -> (__torch__.torch.classes.rnn.CellParamsBase)
aten::max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=[0], int[1] dilation=[1], bool ceil_mode=False) -> (Tensor, Tensor)
quantized::quantized_rnn_tanh_cell_dynamic(Tensor input, Tensor hx, __torch__.torch.classes.quantized.LinearPackedParamsBase w_ih, __torch__.torch.classes.quantized.LinearPackedParamsBase w_hh, Tensor b_ih, Tensor b_hh) -> (Tensor)
quantized::make_quantized_cell_params_fp16(__torch__.torch.classes.quantized.LinearPackedParamsBase w_ih, __torch__.torch.classes.quantized.LinearPackedParamsBase w_hh) -> (__torch__.torch.classes.rnn.CellParamsBase)
aten::matmul(Tensor self, Tensor other) -> (Tensor)
aten::matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
quantized::make_quantized_cell_params_dynamic(__torch__.torch.classes.quantized.LinearPackedParamsBase w_ih, __torch__.torch.classes.quantized.LinearPackedParamsBase w_hh, Tensor bias_ih, Tensor bias_hh, bool reduce_range=False) -> (__torch__.torch.classes.rnn.CellParamsBase)
aten::masked_select(Tensor self, Tensor mask) -> (Tensor)
aten::masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> (Tensor(a!))
aten::is_leaf(Tensor self) -> (bool)
aten::lt.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
aten::lt.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::lt.int(int a, int b) -> (bool)
aten::lt.float(float a, float b) -> (bool)
aten::lt.int_float(int a, float b) -> (bool)
aten::lt.float_int(float a, int b) -> (bool)
aten::lt(Scalar a, Scalar b) -> (bool)
aten::lt.str(str a, str b) -> (bool)
aten::set_data(Tensor(a!) self, Tensor new_data) -> ()
aten::true_divide.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::true_divide.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::true_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::logspace(Scalar start, Scalar end, int steps=100, float base=10., *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::logspace.out(Scalar start, Scalar end, int steps=100, float base=10., *, Tensor(a!) out) -> (Tensor(a!))
aten::sqrt_(Tensor(a!) self) -> (Tensor(a!))
aten::_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> (Tensor)
aten::logical_xor_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::logical_xor(Tensor self, Tensor other) -> (Tensor)
aten::logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1.0000000000000001e-05, bool cudnn_enable=True) -> (Tensor)
aten::logical_or_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::logical_or(Tensor self, Tensor other) -> (Tensor)
aten::logical_or.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> (Tensor)
aten::logical_not(Tensor self) -> (Tensor)
aten::logical_not.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)
aten::kthvalue.dimname(Tensor self, int k, str dim, bool keepdim=False) -> (Tensor values, Tensor indices)
aten::kthvalue.dimname_out(Tensor self, int k, str dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::logical_and(Tensor self, Tensor other) -> (Tensor)
aten::logical_and.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::kl_div(Tensor self, Tensor target, int reduction=1, *, bool log_target=False) -> (Tensor)
aten::rsqrt_(Tensor(a!) self) -> (Tensor(a!))
aten::log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> (Tensor)
aten::trunc_(Tensor(a!) self) -> (Tensor(a!))
aten::logaddexp2(Tensor self, Tensor other) -> (Tensor)
aten::logaddexp2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::isneginf.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::isneginf(Tensor self) -> (Tensor)
aten::log2_(Tensor(a!) self) -> (Tensor(a!))
aten::log10_(Tensor(a!) self) -> (Tensor(a!))
aten::lgamma_(Tensor(a!) self) -> (Tensor(a!))
aten::is_signed(Tensor self) -> (bool)
aten::logical_not_(Tensor(a!) self) -> (Tensor(a!))
aten::l1_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor)
aten::l1_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))
aten::le.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
aten::le.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::le.int(int a, int b) -> (bool)
aten::le.float(float a, float b) -> (bool)
aten::le.int_float(int a, float b) -> (bool)
aten::le.float_int(float a, int b) -> (bool)
aten::le(Scalar a, Scalar b) -> (bool)
aten::le.str(str a, str b) -> (bool)
aten::masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> (Tensor(a!))
aten::masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> (Tensor(a!))
aten::log_(Tensor(a!) self) -> (Tensor(a!))
aten::isnan(Tensor self) -> (Tensor)
aten::isnan.float(float a) -> (bool)
aten::is_set_to(Tensor self, Tensor tensor) -> (bool)
aten::isinf(Tensor self) -> (Tensor)
aten::isinf.float(float a) -> (bool)
aten::is_same_size(Tensor self, Tensor other) -> (bool)
aten::isfinite(Tensor self) -> (Tensor)
aten::isfinite.float(float a) -> (bool)
aten::is_nonzero(Tensor self) -> (bool)
aten::is_pinned(Tensor self) -> (bool)
aten::is_floating_point(Tensor self) -> (bool)
aten::index_fill_.Dimname_Scalar(Tensor(a!) self, str dim, Tensor index, Scalar value) -> (Tensor(a!))
aten::index_fill_.Dimname_Tensor(Tensor(a!) self, str dim, Tensor index, Tensor value) -> (Tensor(a!))
aten::index_fill_.int_Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> (Tensor(a!))
aten::index_fill_.int_Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> (Tensor(a!))
aten::hypot_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::frac_(Tensor(a!) self) -> (Tensor(a!))
aten::floor_divide_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::floor_divide_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::is_complex(Tensor self) -> (bool)
aten::floor_divide(Tensor self, Tensor other) -> (Tensor)
aten::floor_divide.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::floor_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::is_coalesced(Tensor self) -> (bool)
aten::floor_(Tensor(a!) self) -> (Tensor(a!))
aten::vander(Tensor x, int? N=None, bool increasing=False) -> (Tensor)
aten::expm1_(Tensor(a!) self) -> (Tensor(a!))
aten::exp_(Tensor(a!) self) -> (Tensor(a!))
aten::erfinv_(Tensor(a!) self) -> (Tensor(a!))
aten::indices(Tensor(a) self) -> (Tensor(a))
aten::erfc_(Tensor(a!) self) -> (Tensor(a!))
aten::index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> (Tensor(a!))
aten::index_select(Tensor self, int dim, Tensor index) -> (Tensor)
aten::index_select.dimname_out(Tensor self, str dim, Tensor index, *, Tensor(a!) out) -> (Tensor(a!))
aten::index_select.dimname(Tensor self, str dim, Tensor index) -> (Tensor)
aten::erfc(Tensor self) -> (Tensor)
aten::erfc.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::erfc.int(int a) -> (float)
aten::erfc.float(float a) -> (float)
aten::erfc.Scalar(Scalar a) -> (Scalar)
aten::erf_(Tensor(a!) self) -> (Tensor(a!))
aten::index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> (Tensor)
aten::index_put.hacked_twin(Tensor self, Tensor[] indices, Tensor values, bool accumulate=False) -> (Tensor)
aten::erf(Tensor self) -> (Tensor)
aten::erf.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::erf.int(int a) -> (float)
aten::erf.float(float a) -> (float)
aten::erf.Scalar(Scalar a) -> (Scalar)
aten::eq.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
aten::eq.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::eq.int_list(int[] a, int[] b) -> (bool)
aten::eq.enum(AnyEnumType a, AnyEnumType b) -> (bool)
aten::eq.int(int a, int b) -> (bool)
aten::eq.float(float a, float b) -> (bool)
aten::eq.int_float(int a, float b) -> (bool)
aten::eq.float_int(float a, int b) -> (bool)
aten::eq(Scalar a, Scalar b) -> (bool)
aten::eq.str(str a, str b) -> (bool)
aten::eq.device(Device a, Device b) -> (bool)
aten::eq.float_list(float[] a, float[] b) -> (bool)
aten::eq.Tensor_list(Tensor[] a, Tensor[] b) -> (bool)
aten::eq.bool_list(bool[] a, bool[] b) -> (bool)
aten::eq.str_list(str[] a, str[] b) -> (bool)
aten::empty_like(Tensor self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
aten::dropout_(Tensor(a!) self, float p, bool train) -> (Tensor(a!))
aten::index_fill.Dimname_Scalar(Tensor self, str dim, Tensor index, Scalar value) -> (Tensor)
aten::index_fill.Dimname_Tensor(Tensor self, str dim, Tensor index, Tensor value) -> (Tensor)
aten::index_fill.int_Scalar(Tensor self, int dim, Tensor index, Scalar value) -> (Tensor)
aten::index_fill.int_Tensor(Tensor self, int dim, Tensor index, Tensor value) -> (Tensor)
aten::dropout(Tensor input, float p, bool train) -> (Tensor)
aten::div_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::div_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::digamma_(Tensor(a!) self) -> (Tensor(a!))
aten::detach_(Tensor(a!) self) -> (Tensor(a!))
aten::detach(Tensor(a) self) -> (Tensor(a))
aten::deg2rad_(Tensor(a!) self) -> (Tensor(a!))
aten::deg2rad(Tensor self) -> (Tensor)
aten::deg2rad.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::cummin(Tensor self, int dim) -> (Tensor values, Tensor indices)
aten::cummin.dimname(Tensor self, str dim) -> (Tensor values, Tensor indices)
aten::cummin.dimname_out(Tensor self, str dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::cummin.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::cummax(Tensor self, int dim) -> (Tensor values, Tensor indices)
aten::cummax.dimname(Tensor self, str dim) -> (Tensor values, Tensor indices)
aten::cummax.dimname_out(Tensor self, str dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::cummax.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::cos_(Tensor(a!) self) -> (Tensor(a!))
aten::hypot(Tensor self, Tensor other) -> (Tensor)
aten::hypot.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::std(Tensor self, bool unbiased=True) -> (Tensor)
aten::std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor)
aten::std.names_dim(Tensor self, str[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor)
aten::std.names_out(Tensor self, str[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::sparse_resize_and_clear_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> (Tensor(a!))
aten::contiguous(Tensor(a) self, *, int memory_format=0) -> (Tensor(a))
aten::conj(Tensor self) -> (Tensor)
aten::conj.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::clamp_min_(Tensor(a!) self, Scalar min) -> (Tensor(a!))
aten::hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> (Tensor(a!))
aten::hspmm(Tensor mat1, Tensor mat2) -> (Tensor)
aten::clamp_max_(Tensor(a!) self, Scalar max) -> (Tensor(a!))
aten::histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> (Tensor(a!))
aten::histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> (Tensor)
aten::clamp_max(Tensor self, Scalar max) -> (Tensor)
aten::clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> (Tensor(a!))
aten::ceil_(Tensor(a!) self) -> (Tensor(a!))
aten::hinge_embedding_loss(Tensor self, Tensor target, float margin=1., int reduction=1) -> (Tensor)
aten::cudnn_convolution.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::cudnn_convolution(Tensor self, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> (Tensor)
aten::rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> (Tensor)
aten::_debug_has_internal_overlap(Tensor self) -> (int)
aten::convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> (Tensor)
aten::sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> (Tensor(a!))
aten::sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> (Tensor(a!))
aten::_use_cudnn_rnn_flatten_weight() -> (bool)
aten::conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=[1], int[1] padding=[0], int[1] output_padding=[0], int groups=1, int[1] dilation=[1]) -> (Tensor)
aten::sqrt(Tensor self) -> (Tensor)
aten::sqrt.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::sqrt.int(int a) -> (float)
aten::sqrt.float(float a) -> (float)
aten::sqrt.Scalar(Scalar a) -> (Scalar)
aten::set_quantizer_(Tensor(a!) self, int quantizer) -> (Tensor(a!))
aten::conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> (Tensor)
aten::clamp_min(Tensor self, Scalar min) -> (Tensor)
aten::clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> (Tensor(a!))
aten::split.Tensor(Tensor(a) self, int split_size, int dim=0) -> (Tensor[])
aten::split.str(str self, str? separator=None, int max=-1) -> (str[])
aten::split(Tensor self, int[] split_sizes, int dim=0) -> (Tensor[])
aten::int_repr(Tensor self) -> (Tensor)
aten::stride.Dimname(Tensor self, str dim) -> (int)
aten::stride.int(Tensor self, int dim) -> (int)
aten::_coalesced_(Tensor(a!) self, bool coalesced) -> (Tensor(a!))
aten::conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1], int groups=1) -> (Tensor)
aten::conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] dilation=[1, 1], int groups=1) -> (Tensor)
aten::_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> (Tensor)
aten::_version(Tensor self) -> (int)
aten::uniform_(Tensor(a!) self, float from=0., float to=1., *, Generator? generator=None) -> (Tensor(a!))
aten::randperm(int n, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::randperm.generator(int n, *, Generator? generator, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::randperm.out(int n, *, Tensor(a!) out) -> (Tensor(a!))
aten::randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> (Tensor(a!))
aten::gelu_backward(Tensor grad, Tensor self) -> (Tensor)
aten::randn(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::randn.generator(int[] size, *, Generator? generator, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::randn.names(int[] size, *, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::randn.generator_with_names(int[] size, *, Generator? generator, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::randn.out(int[] size, *, Tensor(a!) out) -> (Tensor(a!))
aten::randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> (Tensor(a!))
aten::batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)
aten::rand(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::rand.generator(int[] size, *, Generator? generator, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::rand.names(int[] size, *, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::rand.generator_with_names(int[] size, *, Generator? generator, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::rand.out(int[] size, *, Tensor(a!) out) -> (Tensor(a!))
aten::rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> (Tensor(a!))
aten::_inverse_helper(Tensor self) -> (Tensor)
aten::abs(Tensor self) -> (Tensor)
aten::abs.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::randint_like(Tensor self, int high, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
aten::randint_like.low_dtype(Tensor self, int low, int high, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
aten::_compute_linear_combination(Tensor input, Tensor coefficients) -> (Tensor)
aten::_compute_linear_combination.out(Tensor input, Tensor coefficients, *, Tensor(a!) out) -> (Tensor(a!))
aten::randn_like(Tensor self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
aten::channel_shuffle(Tensor self, int groups) -> (Tensor)
aten::random_.from(Tensor(a!) self, int from, int? to, *, Generator? generator=None) -> (Tensor(a!))
aten::random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> (Tensor(a!))
aten::random_(Tensor(a!) self, *, Generator? generator=None) -> (Tensor(a!))
aten::gelu(Tensor self) -> (Tensor)
aten::reciprocal(Tensor self) -> (Tensor)
aten::reciprocal.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::roll(Tensor self, int[1] shifts, int[1] dims=[]) -> (Tensor)
aten::conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=[1], int[1] padding=[0], int[1] dilation=[1], int groups=1) -> (Tensor)
aten::normal.Tensor_float(Tensor mean, float std=1., *, Generator? generator=None) -> (Tensor)
aten::normal.Tensor_float_out(Tensor mean, float std=1., *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
aten::normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
aten::normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> (Tensor)
aten::normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> (Tensor)
aten::normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
aten::normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
quantized::group_norm(Tensor input, int num_groups, Tensor? weight, Tensor? bias, float eps, float output_scale, int output_zero_point) -> (Tensor)
aten::log_normal_(Tensor(a!) self, float mean=1., float std=2., *, Generator? generator=None) -> (Tensor(a!))
aten::_infer_size(int[] a, int[] b) -> (int[])
aten::asin(Tensor self) -> (Tensor)
aten::asin.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::asin.int(int a) -> (float)
aten::asin.float(float a) -> (float)
aten::asin.Scalar(Scalar a) -> (Scalar)
quantized::embedding_bag_byte(__torch__.torch.classes.quantized.EmbeddingPackedParamsBase weight, Tensor indices, Tensor? offsets=None, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, Tensor? compressed_indices_mapping=None, bool include_last_offset=False) -> (Tensor)
aten::multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=1, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=1) -> (Tensor)
aten::multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> (Tensor)
aten::multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
quantized::embedding_bag_2bit_prepack(Tensor weight) -> (Tensor)
aten::select.int(Tensor(a) self, int dim, int index) -> (Tensor(a))
aten::select.Dimname(Tensor(a) self, str dim, int index) -> (Tensor(a))
aten::select.t(t[](a) list, int idx) -> (t(*))
aten::hardswish_backward(Tensor grad_output, Tensor self) -> (Tensor)
aten::to.device(Tensor self, Device device, int dtype, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor)
aten::to.dtype(Tensor self, int dtype, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor)
aten::to.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor)
aten::to.dtype_layout(Tensor self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor)
aten::to.prim_Device(Tensor(a) self, Device? device, int? dtype=None, bool non_blocking=False, bool copy=False) -> (Tensor(b|a))
aten::to.prim_dtype(Tensor(a) self, int? dtype=None, bool non_blocking=False, bool copy=False) -> (Tensor(b|a))
aten::to.prim_other(Tensor(a) self, bool non_blocking=False, bool copy=False) -> (Tensor(b|a))
quantized::conv2d_groups(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int)
aten::mse_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor)
aten::mse_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))
aten::pow_.Scalar(Tensor(a!) self, Scalar exponent) -> (Tensor(a!))
aten::pow_.Tensor(Tensor(a!) self, Tensor exponent) -> (Tensor(a!))
aten::lgamma(Tensor self) -> (Tensor)
aten::lgamma.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::lgamma.int(int a) -> (float)
aten::lgamma.float(float a) -> (float)
aten::lgamma.Scalar(Scalar a) -> (Scalar)
aten::sinh(Tensor self) -> (Tensor)
aten::sinh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::sinh.int(int a) -> (float)
aten::sinh.float(float a) -> (float)
aten::sinh.Scalar(Scalar a) -> (Scalar)
aten::logit_backward.grad_input(Tensor grad_output, Tensor self, float? eps=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::logit_backward(Tensor grad_output, Tensor self, float? eps=None) -> (Tensor)
aten::baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
aten::baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
aten::round(Tensor self) -> (Tensor)
aten::round.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::round.int(int a) -> (float)
aten::round.float(float a) -> (float)
aten::round.Scalar(Scalar a) -> (Scalar)
aten::unfold_backward(Tensor grad_in, int[] input_sizes, int dim, int size, int step) -> (Tensor)
aten::sign(Tensor self) -> (Tensor)
aten::sign.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> (Tensor)
aten::neg_(Tensor(a!) self) -> (Tensor(a!))
aten::leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> (Tensor(a!))
aten::leaky_relu(Tensor self, Scalar negative_slope=0.01) -> (Tensor)
aten::linear(Tensor input, Tensor weight, Tensor? bias=None) -> (Tensor)
aten::rad2deg_(Tensor(a!) self) -> (Tensor(a!))
aten::log2(Tensor self) -> (Tensor)
aten::log2.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::rename_(Tensor(a!) self, str[]? names) -> (Tensor(a!))
aten::size.int(Tensor self, int dim) -> (int)
aten::size.Dimname(Tensor self, str dim) -> (int)
aten::size(Tensor self) -> (int[])
aten::tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::tanh_backward(Tensor grad_output, Tensor output) -> (Tensor)
aten::sigmoid(Tensor self) -> (Tensor)
aten::sigmoid.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> (Tensor)
aten::polygamma_(Tensor(a!) self, int n) -> (Tensor(a!))
aten::lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> (Tensor(a!))
aten::lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> (Tensor(a!))
aten::lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> (Tensor)
aten::lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> (Tensor)
aten::sin(Tensor self) -> (Tensor)
aten::sin.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::sin.int(int a) -> (float)
aten::sin.float(float a) -> (float)
aten::sin.Scalar(Scalar a) -> (Scalar)
aten::sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::sigmoid_backward(Tensor grad_output, Tensor output) -> (Tensor)
aten::norm.Scalar(Tensor self, Scalar p=2) -> (Tensor)
aten::norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> (Tensor)
aten::norm.names_ScalarOpt_dim(Tensor self, Scalar? p, str[1] dim, bool keepdim=False) -> (Tensor)
aten::norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, int dtype) -> (Tensor)
aten::norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, int dtype) -> (Tensor)
aten::norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, int dtype, Tensor(a!) out) -> (Tensor(a!))
aten::norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, str[1] dim, bool keepdim, *, int dtype) -> (Tensor)
aten::norm.names_dtype_out(Tensor self, Scalar? p, str[1] dim, bool keepdim, *, int dtype, Tensor(a!) out) -> (Tensor(a!))
aten::norm.names_out(Tensor self, Scalar? p, str[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
quantized::mul_scalar_relu_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
quantized::mul_scalar_relu_out.Tensor(Tensor qa, Tensor b, Tensor(a!) out) -> (Tensor(a!) out)
aten::exponential_(Tensor(a!) self, float lambd=1., *, Generator? generator=None) -> (Tensor(a!))
aten::full_like(Tensor self, Scalar fill_value, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
_test::cat(Tensor[] inputs) -> (Tensor)
aten::arccosh(Tensor self) -> (Tensor)
aten::arccosh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::any(Tensor self) -> (Tensor)
aten::any.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor)
aten::any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::any.dimname(Tensor self, str dim, bool keepdim=False) -> (Tensor)
aten::any.dimname_out(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::asinh_(Tensor(a!) self) -> (Tensor(a!))
aten::hardsigmoid(Tensor self) -> (Tensor)
aten::hardsigmoid.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::permute(Tensor(a) self, int[] dims) -> (Tensor(a))
aten::empty_meta(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
aten::numpy_T(Tensor(a) self) -> (Tensor(a))
aten::randint(int high, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::randint.generator(int high, int[] size, *, Generator? generator, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::randint.low(int low, int high, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::randint.low_generator(int low, int high, int[] size, *, Generator? generator, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::randint.out(int high, int[] size, *, Tensor(a!) out) -> (Tensor(a!))
aten::randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> (Tensor(a!))
aten::randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> (Tensor(a!))
aten::randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> (Tensor(a!))
aten::_logcumsumexp(Tensor self, int dim) -> (Tensor)
aten::_logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> (Tensor(a!))
aten::movedim.intlist(Tensor(a) self, int[] source, int[] destination) -> (Tensor(a))
aten::movedim.int(Tensor(a) self, int source, int destination) -> (Tensor(a))
aten::_empty_affine_quantized(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, float scale=1., int zero_point=0, int? memory_format=0) -> (Tensor)
aten::diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> (Tensor(a))
aten::diagonal.Dimname(Tensor(a) self, *, str outdim, str dim1, str dim2, int offset=0) -> (Tensor(a))
quantized::conv2d_padding(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int[])
aten::mm(Tensor self, Tensor mat2) -> (Tensor)
aten::mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> (Tensor(a!))
aten::mul.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::mul.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::mul.left_t(t[] l, int n) -> (t[])
aten::mul.right_(int n, t[] l) -> (t[])
aten::mul.int(int a, int b) -> (int)
aten::mul.float(float a, float b) -> (float)
aten::mul.int_float(int a, float b) -> (float)
aten::mul.float_int(float a, int b) -> (float)
aten::mul(Scalar a, Scalar b) -> (Scalar)
quantized::conv3d_dilation(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int[])
aten::Size(int[] sizes) -> (int[])
aten::_ncf_unsqueeze(Tensor(a) self, int ndim) -> (Tensor(a))
aten::upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None) -> (Tensor)
aten::upsample_linear1d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> (Tensor)
aten::div.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::div.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::div.int(int a, int b) -> (float)
aten::div.float(float a, float b) -> (float)
aten::div(Scalar a, Scalar b) -> (float)
_caffe2::RoIAlignGradient(Tensor features, Tensor rois, Tensor grad, str order, float spatial_scale, int pooled_h, int pooled_w, int sampling_ratio, bool aligned, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor)
prim::MMBatchSide(...) -> (...)
aten::unbind.int(Tensor(a) self, int dim=0) -> (Tensor[])
aten::unbind.Dimname(Tensor(a) self, str dim) -> (Tensor[])
aten::sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
aten::sum(Tensor self, *, int? dtype=None) -> (Tensor)
aten::sum.dim_DimnameList(Tensor self, str[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
aten::sum.DimnameList_out(Tensor self, str[1] dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
aten::sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
aten::_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, int? dtype) -> (Tensor, Tensor)
aten::expand_as(Tensor(a) self, Tensor other) -> (Tensor(a))
aten::quantized_gru.input(Tensor input, Tensor hx, __torch__.torch.classes.rnn.CellParamsBase[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
aten::quantized_gru.data(Tensor data, Tensor batch_sizes, Tensor hx, __torch__.torch.classes.rnn.CellParamsBase[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
aten::quantized_gru.input_legacy(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
aten::quantized_gru.data_legacy(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
aten::_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> (Tensor)
aten::unflatten.Dimname(Tensor(a) self, str dim, int[] sizes, str[] names) -> (Tensor(a))
aten::unflatten.int(Tensor(a) self, int dim, int[] sizes, str[]? names=None) -> (Tensor(a))
aten::chunk(Tensor(a) self, int chunks, int dim=0) -> (Tensor[])
aten::sigmoid_(Tensor(a!) self) -> (Tensor(a!))
aten::floor(Tensor self) -> (Tensor)
aten::floor.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::floor.int(int a) -> (int)
aten::floor.float(float a) -> (int)
aten::floor.Scalar(Scalar a) -> (Scalar)
quantized::elu(Tensor self, float output_scale, int output_zero_point, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> (Tensor)
aten::relu(Tensor self) -> (Tensor)
aten::to_mkldnn(Tensor self) -> (Tensor)
aten::add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> (Tensor(a!))
aten::add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> (Tensor(a!))
aten::add_.t(t[](a!) self, t[] b) -> (t[])
aten::_remove_batch_dim(Tensor self, int level, int batch_size, int out_dim) -> (Tensor)
aten::fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> (Tensor)
aten::rand_like(Tensor self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
aten::native_layer_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
aten::std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)
aten::std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
aten::std_mean.names_dim(Tensor self, str[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
aten::tanh(Tensor self) -> (Tensor)
aten::tanh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::tanh.int(int a) -> (float)
aten::tanh.float(float a) -> (float)
aten::tanh.Scalar(Scalar a) -> (Scalar)
aten::as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> (Tensor(a!))
aten::frac(Tensor self) -> (Tensor)
aten::frac.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::_ncf_view(Tensor(a) self, int[] input_shape, int normalized_ndim) -> (Tensor(a))
tensorexpr::Group(...) -> (...)
aten::isspace(str self) -> (bool)
aten::clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> (Tensor(a!))
aten::_cdist_forward(Tensor x1, Tensor x2, float p, int? compute_mode) -> (Tensor)
aten::group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1.0000000000000001e-05, bool cudnn_enabled=True) -> (Tensor)
aten::add_relu.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> (Tensor)
aten::add_relu.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
aten::cumsum(Tensor self, int dim, *, int? dtype=None) -> (Tensor)
aten::cumsum.dimname(Tensor self, str dim, *, int? dtype=None) -> (Tensor)
aten::cumsum.dimname_out(Tensor self, str dim, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
aten::cumsum.out(Tensor self, int dim, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
aten::atanh(Tensor self) -> (Tensor)
aten::atanh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::atanh.int(int a) -> (float)
aten::atanh.float(float a) -> (float)
aten::atanh.Scalar(Scalar a) -> (Scalar)
aten::hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> (Tensor(a!))
aten::hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> (Tensor)
aten::confirmed_by_owner(RRef(t) self) -> (bool)
aten::addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> (Tensor(a!))
aten::__interpolate.scale_list(Tensor input, int? size=None, float[]? scale_factor=None, str mode="nearest", bool? align_corners=None, bool? recompute_scale_factor=None) -> (Tensor)
aten::__interpolate.size_list_scale_list(Tensor input, int[]? size=None, float[]? scale_factor=None, str mode="nearest", bool? align_corners=None, bool? recompute_scale_factor=None) -> (Tensor)
aten::__interpolate(Tensor input, int? size=None, float? scale_factor=None, str mode="nearest", bool? align_corners=None, bool? recompute_scale_factor=None) -> (Tensor)
aten::__interpolate.size_list(Tensor input, int[]? size=None, float? scale_factor=None, str mode="nearest", bool? align_corners=None, bool? recompute_scale_factor=None) -> (Tensor)
aten::acos(Tensor self) -> (Tensor)
aten::acos.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::acos.int(int a) -> (float)
aten::acos.float(float a) -> (float)
aten::acos.Scalar(Scalar a) -> (Scalar)
aten::nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100) -> (Tensor)
aten::nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100, *, Tensor(a!) out) -> (Tensor(a!))
quantized::mul_relu(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc)
quantized::mul_relu.out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
quantized::mul_relu.Scalar(Tensor qa, Scalar b) -> (Tensor qc)
quantized::mul_relu.Scalar_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
aten::expand(Tensor(a) self, int[] size, *, bool implicit=False) -> (Tensor(a))
aten::poisson(Tensor self, Generator? generator=None) -> (Tensor)
aten::tril_indices(int row, int col, int offset=0, *, int? dtype=4, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=1) -> (Tensor)
_caffe2::PiecewiseLinearTransform(Tensor predictions, float[] bounds, float[] slopes, float[] intercepts, bool binary, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output_0)
prim::FusedConcat(...) -> (...)
aten::triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1., float p=2., float eps=9.9999999999999995e-07, bool swap=False, int reduction=1) -> (Tensor)
aten::digamma(Tensor self) -> (Tensor)
aten::digamma.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::atan2_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::hardsigmoid_backward(Tensor grad_output, Tensor self) -> (Tensor)
aten::conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] output_padding=[0, 0], int groups=1, int[2] dilation=[1, 1]) -> (Tensor)
aten::geqrf.a(Tensor self, *, Tensor(a!) a, Tensor(b!) tau) -> (Tensor(a!) a, Tensor(b!) tau)
aten::geqrf(Tensor self) -> (Tensor a, Tensor tau)
aten::_no_grad_uniform_(Tensor(a!) tensor, float a, float b) -> (Tensor(a!))
aten::atan(Tensor self) -> (Tensor)
aten::atan.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::atan.int(int a) -> (float)
aten::atan.float(float a) -> (float)
aten::atan.Scalar(Scalar a) -> (Scalar)
aten::view(Tensor(a) self, int[] size) -> (Tensor(a))
aten::bernoulli(Tensor self, *, Generator? generator=None) -> (Tensor)
aten::bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
aten::bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> (Tensor)
aten::slice.Tensor(Tensor(a) self, int dim=0, int start=0, int end=9223372036854775807, int step=1) -> (Tensor(a))
aten::slice.str(str string, int start, int end=9223372036854775807, int step=1) -> (str)
aten::slice.t(t[] l, int start, int end=9223372036854775807, int step=1) -> (t[])
aten::col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> (Tensor)
aten::bmm(Tensor self, Tensor mat2) -> (Tensor)
aten::bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> (Tensor(a!))
aten::view_as(Tensor(a) self, Tensor other) -> (Tensor(a))
aten::conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] output_padding=[0, 0, 0], int groups=1, int[3] dilation=[1, 1, 1]) -> (Tensor)
aten::_no_grad_normal_(Tensor(a!) tensor, float mean, float std) -> (Tensor(a!))
aten::atan_(Tensor(a!) self) -> (Tensor(a!))
aten::clone(Tensor self, *, int? memory_format=None) -> (Tensor)
aten::split_with_sizes(Tensor(a) self, int[] split_sizes, int dim=0) -> (Tensor[])
aten::qscheme(Tensor self) -> (QScheme)
aten::exp(Tensor self) -> (Tensor)
aten::exp.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::exp.int(int a) -> (float)
aten::exp.float(float a) -> (float)
aten::exp.Scalar(Scalar a) -> (Scalar)
aten::squeeze.dim(Tensor(a) self, int dim) -> (Tensor(a))
aten::squeeze(Tensor(a) self) -> (Tensor(a))
aten::squeeze.dimname(Tensor(a) self, str dim) -> (Tensor(a))
aten::_sparse_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> (Tensor)
aten::narrow(Tensor(a) self, int dim, int start, int length) -> (Tensor(a))
aten::narrow.Tensor(Tensor(a) self, int dim, Tensor start, int length) -> (Tensor(a))
quantized::embedding_bag_2bit_unpack(Tensor weight) -> (Tensor)
aten::output_nr(Tensor self) -> (int)
aten::fill_.Scalar(Tensor(a!) self, Scalar value) -> (Tensor(a!))
aten::fill_.Tensor(Tensor(a!) self, Tensor value) -> (Tensor(a!))
aten::expm1(Tensor self) -> (Tensor)
aten::expm1.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::expm1.int(int a) -> (float)
aten::expm1.float(float a) -> (float)
aten::expm1.Scalar(Scalar a) -> (Scalar)
aten::neg(Tensor self) -> (Tensor)
aten::neg.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::neg.int(int a) -> (int)
aten::neg.float(float a) -> (float)
aten::neg.Scalar(Scalar a) -> (Scalar)
quantized::linear_prepack_fp16(Tensor W, Tensor? B=None) -> (__torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack)
aten::unfold(Tensor(a) self, int dimension, int size, int step) -> (Tensor(a))
aten::unsqueeze(Tensor(a) self, int dim) -> (Tensor(a))
aten::nonzero_numpy(Tensor self) -> (Tensor[])
prim::CudaFusionGroup(...) -> (...)
aten::q_per_channel_scales(Tensor self) -> (Tensor)
aten::sparse_mask(Tensor self, Tensor mask) -> (Tensor)
aten::ceil(Tensor self) -> (Tensor)
aten::ceil.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::ceil.int(int a) -> (int)
aten::ceil.float(float a) -> (int)
aten::ceil.Scalar(Scalar a) -> (Scalar)
aten::cos(Tensor self) -> (Tensor)
aten::cos.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::cos.int(int a) -> (float)
aten::cos.float(float a) -> (float)
aten::cos.Scalar(Scalar a) -> (Scalar)
aten::cosh(Tensor self) -> (Tensor)
aten::cosh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::cosh.int(int a) -> (float)
aten::cosh.float(float a) -> (float)
aten::cosh.Scalar(Scalar a) -> (Scalar)
aten::stack(Tensor[] tensors, int dim=0) -> (Tensor)
aten::stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> (Tensor(a!))
aten::sparse_resize_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> (Tensor(a!))
aten::cudnn_convolution_transpose.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::cudnn_convolution_transpose(Tensor self, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::prelu(Tensor self, Tensor weight) -> (Tensor)
aten::_cummax_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
aten::addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
aten::addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
aten::_var(Tensor self, bool unbiased=True) -> (Tensor)
aten::grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)
aten::resize_(Tensor(a!) self, int[] size, *, int? memory_format=None) -> (Tensor(a!))
aten::_svd_helper(Tensor self, bool some, bool compute_uv) -> (Tensor, Tensor, Tensor)
aten::addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
aten::addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
aten::addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
aten::addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
aten::swapcase(str self) -> (str)
aten::item(Tensor self) -> (Scalar)
aten::add_relu_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> (Tensor(a!))
quantized::conv_unpack(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (Tensor unpacked_weights, Tensor? B_origin)
aten::mv(Tensor self, Tensor vec) -> (Tensor)
aten::mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> (Tensor(a!))
quantized::embedding_bag_prepack(Tensor weight) -> (__torch__.torch.classes.quantized.EmbeddingPackedParamsBase W_prepack)
aten::addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
aten::addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
aten::cosh_(Tensor(a!) self) -> (Tensor(a!))
aten::_sparse_log_softmax.Dimname(Tensor self, str dim, *, int? dtype=None) -> (Tensor)
aten::_sparse_log_softmax.int(Tensor self, int dim, int? dtype=None) -> (Tensor)
aten::_sparse_log_softmax(Tensor self, int dim, bool half_to_float) -> (Tensor)
aten::grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor)
aten::argsort(Tensor self, int dim=-1, bool descending=False) -> (Tensor)
aten::argsort.dimname(Tensor self, str dim, bool descending=False) -> (Tensor)
prim::DifferentiableGraph(...) -> (...)
aten::q_per_channel_axis(Tensor self) -> (int)
aten::chain_matmul(Tensor[] matrices) -> (Tensor)
aten::erfinv(Tensor self) -> (Tensor)
aten::erfinv.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::pow.Tensor_Scalar(Tensor self, Scalar exponent) -> (Tensor)
aten::pow.Tensor_Tensor(Tensor self, Tensor exponent) -> (Tensor)
aten::pow.Scalar(Scalar self, Tensor exponent) -> (Tensor)
aten::pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> (Tensor(a!))
aten::pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> (Tensor(a!))
aten::pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> (Tensor(a!))
aten::pow.int(int a, int b) -> (float)
aten::pow.float(float a, float b) -> (float)
aten::pow.int_float(int a, float b) -> (float)
aten::pow.float_int(float a, int b) -> (float)
aten::pow.Scalar_Scalar(Scalar a, Scalar b) -> (float)
aten::pow.int_to_int(int a, int b) -> (int)
aten::_addmv_impl_(Tensor(a!) self, Tensor self2, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))
aten::softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> (Tensor)
aten::softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> (Tensor(a!))
aten::mkldnn_reorder_conv2d_weight(Tensor self, int[2] padding=[0, 0], int[2] stride=[1, 1], int[2] dilation=[1, 1], int groups=1) -> (Tensor)
aten::quantized_lstm.input(Tensor input, Tensor[] hx, __torch__.torch.classes.rnn.CellParamsBase[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, int? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)
aten::quantized_lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, __torch__.torch.classes.rnn.CellParamsBase[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, *, int? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)
aten::quantized_lstm.input_legacy(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, int? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)
aten::quantized_lstm.data_legacy(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, *, int? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)
aten::_cat(Tensor[] tensors, int dim=0) -> (Tensor)
aten::_cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> (Tensor(a!))
aten::logical_and_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=1, *, bool log_target=False) -> (Tensor)
aten::native_layer_norm(Tensor input, Tensor? weight, Tensor? bias, int M, int N, float eps) -> (Tensor, Tensor, Tensor)
aten::glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> (Tensor(a!))
aten::glu(Tensor self, int dim=-1) -> (Tensor)
aten::nuclear_norm(Tensor self, bool keepdim=False) -> (Tensor)
aten::nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> (Tensor)
aten::nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
quantized::instance_norm(Tensor input, Tensor? weight, Tensor? bias, float eps, float output_scale, int output_zero_point) -> (Tensor)
aten::normal_(Tensor(a!) self, float mean=0., float std=1., *, Generator? generator=None) -> (Tensor(a!))
aten::ge.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
aten::ge.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::ge.int(int a, int b) -> (bool)
aten::ge.float(float a, float b) -> (bool)
aten::ge.int_float(int a, float b) -> (bool)
aten::ge.float_int(float a, int b) -> (bool)
aten::ge(Scalar a, Scalar b) -> (bool)
aten::ge.str(str a, str b) -> (bool)
aten::_no_grad_embedding_renorm_(Tensor weight, Tensor input, float max_norm, float norm_type) -> (Tensor)
aten::asin_(Tensor(a!) self) -> (Tensor(a!))
aten::t(Tensor(a) self) -> (Tensor(a))
aten::feature_dropout_(Tensor(a!) self, float p, bool train) -> (Tensor(a!))
aten::cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> (Tensor)
aten::poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> (Tensor)
aten::glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::glu_backward(Tensor grad_output, Tensor self, int dim) -> (Tensor)
aten::cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0., int reduction=1) -> (Tensor)
aten::nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100) -> (Tensor)
aten::nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100, *, Tensor(a!) out) -> (Tensor(a!))
quantized::mul(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc)
quantized::mul.out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
quantized::mul.Scalar(Tensor qa, Scalar b) -> (Tensor qc)
quantized::mul.Scalar_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
profiler::_call_end_callbacks_on_jit_fut(Tensor x, Future(t) y) -> (Future(t))
aten::fmod_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::fmod_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::frobenius_norm(Tensor self) -> (Tensor)
aten::frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> (Tensor)
aten::frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> (Tensor(a!))
aten::bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> (Tensor(a!))
aten::_list_to_tensor(int[] self) -> (Tensor)
aten::absolute_(Tensor(a!) self) -> (Tensor(a!))
aten::log1p_(Tensor(a!) self) -> (Tensor(a!))
aten::logaddexp(Tensor self, Tensor other) -> (Tensor)
aten::logaddexp.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::isposinf.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::isposinf(Tensor self) -> (Tensor)
aten::trunc(Tensor self) -> (Tensor)
aten::trunc.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::smooth_l1_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor)
aten::smooth_l1_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))
aten::_test_optional_intlist(Tensor values, int[]? addends) -> (Tensor)
aten::cat(Tensor[] tensors, int dim=0) -> (Tensor)
aten::cat.names(Tensor[] tensors, str dim) -> (Tensor)
aten::cat.names_out(Tensor[] tensors, str dim, *, Tensor(a!) out) -> (Tensor(a!))
aten::cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> (Tensor(a!))
quantized::conv2d_unpack(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (Tensor unpacked_weights, Tensor? B_origin)
aten::_local_scalar_dense(Tensor self) -> (Scalar)
aten::multilabel_margin_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor)
aten::multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))
quantized::embedding_bag_4bit_rowwise_offsets(Tensor weight, Tensor indices, Tensor? offsets=None, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, Tensor? compressed_indices_mapping=None, bool include_last_offset=False) -> (Tensor)
aten::soft_margin_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor)
aten::soft_margin_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))
aten::mkldnn_linear(Tensor input, Tensor weight, Tensor? bias=None) -> (Tensor)
_caffe2::ResizeNearest(Tensor X, str order, float width_scale, float height_scale, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor Y)
prim::MMTreeReduce(...) -> (Tensor)
aten::transpose.int(Tensor(a) self, int dim0, int dim1) -> (Tensor(a))
aten::transpose.Dimname(Tensor(a) self, str dim0, str dim1) -> (Tensor(a))
aten::dist(Tensor self, Tensor other, Scalar p=2) -> (Tensor)
aten::pdist(Tensor self, float p=2.) -> (Tensor)
prepacked::conv2d_clamp_prepack(Tensor W, Tensor? B, int[2] stride, int[2] padding, int[2] dilation, int groups, Scalar? output_min=None, Scalar? output_max=None) -> (__torch__.torch.classes.xnnpack.Conv2dOpContext)
aten::cdist(Tensor x1, Tensor x2, float p=2., int? compute_mode=None) -> (Tensor)
prepacked::conv2d_clamp_run(Tensor X, __torch__.torch.classes.xnnpack.Conv2dOpContext W_prepack) -> (Tensor Y)
aten::renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> (Tensor)
aten::renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> (Tensor(a!))
aten::quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, int dtype) -> (Tensor)
aten::reshape(Tensor(a) self, int[] shape) -> (Tensor(a))
aten::remainder_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::remainder_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> (Tensor)
aten::addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> (Tensor(a!))
aten::_sparse_softmax.Dimname(Tensor self, str dim, *, int? dtype=None) -> (Tensor)
aten::_sparse_softmax.int(Tensor self, int dim, int? dtype=None) -> (Tensor)
aten::_sparse_softmax(Tensor self, int dim, bool half_to_float) -> (Tensor)
aten::grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)
aten::prod(Tensor self, *, int? dtype=None) -> (Tensor)
aten::prod.dim_int(Tensor self, int dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
aten::prod.dim_Dimname(Tensor self, str dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
aten::prod.Dimname_out(Tensor self, str dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
aten::prod.int_out(Tensor self, int dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
aten::embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> (Tensor(a!))
aten::softmax.int(Tensor self, int dim, int? dtype=None) -> (Tensor)
aten::softmax.Dimname(Tensor self, str dim, *, int? dtype=None) -> (Tensor)
aten::_mkldnn_reshape(Tensor self, int[] shape) -> (Tensor)
aten::cumprod(Tensor self, int dim, *, int? dtype=None) -> (Tensor)
aten::cumprod.dimname(Tensor self, str dim, *, int? dtype=None) -> (Tensor)
aten::cumprod.dimname_out(Tensor self, str dim, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
aten::cumprod.out(Tensor self, int dim, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
aten::reshape_as(Tensor(a) self, Tensor other) -> (Tensor(a))
aten::_triangular_solve_helper(Tensor self, Tensor A, bool upper, bool transpose, bool unitriangular) -> (Tensor, Tensor)
aten::addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> (Tensor)
aten::addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> (Tensor(a!))
aten::gt.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
aten::gt.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::gt.int(int a, int b) -> (bool)
aten::gt.float(float a, float b) -> (bool)
aten::gt.int_float(int a, float b) -> (bool)
aten::gt.float_int(float a, int b) -> (bool)
aten::gt(Scalar a, Scalar b) -> (bool)
aten::gt.str(str a, str b) -> (bool)
aten::align_as(Tensor self, Tensor other) -> (Tensor)
aten::_std(Tensor self, bool unbiased=True) -> (Tensor)
aten::grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor)
aten::rsqrt(Tensor self) -> (Tensor)
aten::rsqrt.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::bucketize.Tensor(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> (Tensor)
aten::bucketize.Tensor_out(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> (Tensor(a!))
aten::bucketize.Scalar(Scalar self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> (Tensor)
aten::atan2(Tensor self, Tensor other) -> (Tensor)
aten::atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::atan2.int(int a, int b) -> (float)
aten::atan2.float(float a, float b) -> (float)
aten::atan2.int_float(int a, float b) -> (float)
aten::atan2.float_int(float a, int b) -> (float)
aten::atan2.Scalar_Scalar(Scalar a, Scalar b) -> (float)
aten::bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> (Tensor)
aten::tan(Tensor self) -> (Tensor)
aten::tan.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::tan.int(int a) -> (float)
aten::tan.float(float a) -> (float)
aten::tan.Scalar(Scalar a) -> (Scalar)
aten::feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> (Tensor(a!))
aten::cross(Tensor self, Tensor other, int? dim=None) -> (Tensor)
aten::cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::dot(Tensor self, Tensor tensor) -> (Tensor)
aten::dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> (Tensor(a!))
aten::equal(Tensor self, Tensor other) -> (bool)
aten::tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> (Tensor)
aten::_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, Tensor, int)
aten::binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=1) -> (Tensor)
aten::binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))
aten::isdigit(str self) -> (bool)
aten::clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> (Tensor)
aten::clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::_bmm(Tensor self, Tensor mat2, *, bool deterministic=False) -> (Tensor)
aten::_bmm.out(Tensor self, Tensor mat2, *, bool deterministic=False, Tensor(a!) out) -> (Tensor(a!))
aten::add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> (Tensor)
aten::add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> (Tensor)
aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
aten::add.t(t[] a, t[] b) -> (t[])
aten::add.str(str a, str b) -> (str)
aten::add.int(int a, int b) -> (int)
aten::add.float(float a, float b) -> (float)
aten::add.int_float(int a, float b) -> (float)
aten::add.float_int(float a, int b) -> (float)
aten::add(Scalar a, Scalar b) -> (Scalar)
quantized::conv2d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv2dPackedParamsBase)
aten::_fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor)
aten::real(Tensor(a) self) -> (Tensor(a))
aten::copysign.int(int a, int b) -> (float)
aten::copysign.float(float a, float b) -> (float)
aten::copysign.int_float(int a, float b) -> (float)
aten::copysign.float_int(float a, int b) -> (float)
aten::copysign(Scalar a, Scalar b) -> (float)
aten::abs_(Tensor(a!) self) -> (Tensor(a!))
aten::imag(Tensor(a) self) -> (Tensor(a))
aten::_tensor_to_list(Tensor self) -> (int[])
aten::absolute(Tensor self) -> (Tensor)
aten::absolute.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::_add_batch_dim(Tensor self, int batch_dim, int level) -> (Tensor)
aten::fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
aten::fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor)
aten::__upsample_nearest(Tensor input, int? size=None, int? scale_factor=None) -> (Tensor)
aten::__upsample_nearest.size_list(Tensor input, int[]? size=None, int? scale_factor=None) -> (Tensor)
aten::acos_(Tensor(a!) self) -> (Tensor(a!))
aten::acosh(Tensor self) -> (Tensor)
aten::acosh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::acosh.int(int a) -> (float)
aten::acosh.float(float a) -> (float)
aten::acosh.Scalar(Scalar a) -> (Scalar)
aten::cauchy_(Tensor(a!) self, float median=0., float sigma=1., *, Generator? generator=None) -> (Tensor(a!))
aten::full.names(int[] size, Scalar fill_value, *, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::full(int[] size, Scalar fill_value, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> (Tensor(a!))
_test::leaky_relu(Tensor self, float v=0.01) -> (Tensor)
aten::acosh_(Tensor(a!) self) -> (Tensor(a!))
aten::addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))
aten::alias(Tensor(a) self) -> (Tensor(a))
aten::align_tensors(Tensor[] tensors) -> (Tensor[])
aten::hamming_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::hamming_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::align_to(Tensor(a) self, str[] names) -> (Tensor(a))
aten::align_to.ellipsis_idx(Tensor(a) self, str[] order, int ellipsis_idx) -> (Tensor(a))
aten::hann_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::hann_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::all(Tensor self) -> (Tensor)
aten::all.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor)
aten::all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::all.dimname(Tensor self, str dim, bool keepdim=False) -> (Tensor)
aten::all.dimname_out(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::all.int(int[] self) -> (bool)
aten::all.float(float[] self) -> (bool)
aten::all.bool(bool[] self) -> (bool)
aten::angle(Tensor self) -> (Tensor)
aten::angle.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> (Tensor(a!))
aten::gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> (Tensor(a!))
aten::gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> (Tensor)
aten::gather.dimname_out(Tensor self, str dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> (Tensor(a!))
aten::gather.dimname(Tensor self, str dim, Tensor index, *, bool sparse_grad=False) -> (Tensor)
_test::get_first(str[][] _0) -> (str _0)
aten::arccosh_(Tensor(a!) self) -> (Tensor(a!))
aten::as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> (Tensor(a))
aten::addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))
aten::bitwise_not_(Tensor(a!) self) -> (Tensor(a!))
aten::is_owner(RRef(t) self) -> (bool)
aten::copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> (Tensor(a!))
aten::copy_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::copy_.int(Tensor(a!) self, int other) -> (Tensor(a!))
aten::copy_.float(Tensor(a!) self, float other) -> (Tensor(a!))
aten::asinh(Tensor self) -> (Tensor)
aten::asinh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::asinh.int(int a) -> (float)
aten::asinh.float(float a) -> (float)
aten::asinh.Scalar(Scalar a) -> (Scalar)
aten::dist_backward(int context_id, Tensor[] roots, bool retain_graph=False) -> ()
aten::addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> (Tensor(a!))
aten::atanh_(Tensor(a!) self) -> (Tensor(a!))
aten::hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> (Tensor)
aten::bitwise_not(Tensor self) -> (Tensor)
aten::bitwise_not.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
_quantized::linear_prepack_fp16(Tensor W, Tensor? B=None) -> (__torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack)
quantized::embedding_bag_byte_rowwise_offsets(Tensor weight, Tensor indices, Tensor? offsets=None, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor)
quantized::embedding_bag_byte_prepack(Tensor weight) -> (Tensor)
aten::multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target) -> (Tensor)
quantized::embedding_bag_4bit_prepack(Tensor weight) -> (Tensor)
aten::multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))
aten::multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)
quantized::embedding_bag_byte_unpack(Tensor weight) -> (Tensor)
quantized::embedding_bag_4bit_unpack(Tensor weight) -> (Tensor)
quantized::embedding_bag_unpack(__torch__.torch.classes.quantized.EmbeddingPackedParamsBase W_prepack) -> (Tensor W_origin)
aten::narrow_copy(Tensor self, int dim, int start, int length) -> (Tensor)
quantized::hardswish(Tensor input, float output_scale, int output_zero_point) -> (Tensor)
aten::native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)
aten::native_batch_norm.out(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, *, Tensor(a!) out, Tensor(b!) save_mean, Tensor(c!) save_invstd) -> (Tensor(a!), Tensor(b!), Tensor(c!))
quantized::linear(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack, float Y_scale_i, int Y_zero_point_i) -> (Tensor Y)
aten::native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
quantized::linear_relu(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack, float Y_scale_i, int Y_zero_point_i) -> (Tensor Y)
_quantized::linear(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack, float Y_scale_i, int Y_zero_point_i) -> (Tensor Y)
quantized::linear_dynamic(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack, bool reduce_range=False) -> (Tensor Y)
aten::native_norm(Tensor self, Scalar p=2) -> (Tensor)
aten::native_norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, int? dtype) -> (Tensor)
quantized::linear_relu_dynamic(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack, bool reduce_range=False) -> (Tensor Y)
quantized::linear_dynamic_fp16(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack) -> (Tensor Y)
_quantized::linear_dynamic(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack, bool reduce_range=False) -> (Tensor Y)
quantized::linear_prepack(Tensor W, Tensor? B=None) -> (__torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack)
_quantized::linear_prepack(Tensor W, Tensor? B=None) -> (__torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack)
aten::bitwise_and.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::bitwise_and.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
aten::bitwise_and.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::bitwise_and.Tensor(Tensor self, Tensor other) -> (Tensor)
_quantized::linear_prepack_fp16_legacy(Tensor W, Tensor? B=None) -> (Tensor W_prepack)
aten::bitwise_or.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::bitwise_or.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
aten::bitwise_or.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::bitwise_or.Tensor(Tensor self, Tensor other) -> (Tensor)
quantized::linear_unpack.legacy(Tensor W_prepack) -> (Tensor W_origin, Tensor? B_origin)
quantized::linear_unpack(__torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack) -> (Tensor W_origin, Tensor? B_origin)
aten::bitwise_xor.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::bitwise_xor.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
aten::bitwise_xor.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::bitwise_xor.Tensor(Tensor self, Tensor other) -> (Tensor)
quantized::linear_unpack_fp16.legacy(Tensor W_prepack) -> (Tensor W_origin, Tensor? B_origin)
quantized::linear_unpack_fp16(__torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack) -> (Tensor W_origin, Tensor? B_origin)
quantized::mul_out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
aten::nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> (Tensor)
quantized::mul_relu_out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
aten::nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
aten::nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)
quantized::mul_scalar(Tensor qa, Scalar b) -> (Tensor qc)
quantized::mul_scalar.Tensor(Tensor qa, Tensor b) -> (Tensor qc)
aten::nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> (Tensor)
quantized::mul_scalar_relu(Tensor qa, Scalar b) -> (Tensor qc)
quantized::mul_scalar_relu.Tensor(Tensor qa, Tensor b) -> (Tensor qc)
aten::nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
aten::nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)
quantized::mul_scalar_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
quantized::mul_scalar_out.Tensor(Tensor qa, Tensor b, Tensor(a!) out) -> (Tensor(a!) out)
aten::nonzero.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::nonzero(Tensor self) -> (Tensor)
quantized::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight, Tensor? bias, float eps, float output_scale, int output_zero_point) -> (Tensor)
quantized::max_pool2d(Tensor qx, int[] kernel_size, int[] stride, int[] padding, int[] dilation, bool ceil_mode) -> (Tensor)
quantized::relu6(Tensor qx, bool inplace=False) -> (Tensor)
aten::ones.names(int[] size, *, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::ones(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::ones.out(int[] size, *, Tensor(a!) out) -> (Tensor(a!))
_quantized::linear_prepack_legacy(Tensor W, Tensor? B=None) -> (Tensor W_prepack)
aten::orgqr.out(Tensor self, Tensor input2, *, Tensor(a!) out) -> (Tensor(a!))
aten::orgqr(Tensor self, Tensor input2) -> (Tensor)
prepacked::linear_clamp_prepack(Tensor W, Tensor? B=None, Scalar? output_min=None, Scalar? output_max=None) -> (__torch__.torch.classes.xnnpack.LinearOpContext)
prepacked::linear_clamp_run(Tensor X, __torch__.torch.classes.xnnpack.LinearOpContext W_prepack) -> (Tensor Y)
aten::_cudnn_init_dropout_state(float dropout, bool train, int dropout_seed, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
aten::arange(Scalar end, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::arange.start(Scalar start, Scalar end, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::arange.start_step(Scalar start, Scalar end, Scalar step, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> (Tensor(a!))
aten::arange.out(Scalar end, *, Tensor(a!) out) -> (Tensor(a!))
aten::bartlett_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::bartlett_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::blackman_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::blackman_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::empty.names(int[] size, *, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
aten::empty.memory_format(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
aten::empty.out(int[] size, *, int? memory_format=None, Tensor(a!) out) -> (Tensor(a!))
aten::_empty_per_channel_affine_quantized(int[] size, *, Tensor scales, Tensor zero_points, int axis, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=0) -> (Tensor)
aten::empty_strided(int[] size, int[] stride, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::eye(int n, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::eye.m(int n, int m, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::eye.out(int n, *, Tensor(a!) out) -> (Tensor(a!))
aten::eye.m_out(int n, int m, *, Tensor(a!) out) -> (Tensor(a!))
aten::from_file(str filename, bool? shared=None, int? size=0, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::scalar_tensor(Scalar s, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::range.step(Scalar start, Scalar end, Scalar step=1, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::range(Scalar start, Scalar end, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> (Tensor(a!))
aten::logit_(Tensor(a!) self, float? eps=None) -> (Tensor(a!))
aten::zeros.names(int[] size, *, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::zeros(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::zeros.out(int[] size, *, Tensor(a!) out) -> (Tensor(a!))
aten::sparse_coo_tensor.size(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
aten::sparse_coo_tensor.indices(Tensor indices, Tensor values, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::q_zero_point(Tensor self) -> (int)
aten::_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
aten::_sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
aten::_sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
aten::argmax(Tensor self, int? dim=None, bool keepdim=False) -> (Tensor)
aten::argmin(Tensor self, int? dim=None, bool keepdim=False) -> (Tensor)
aten::baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))
aten::binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=1) -> (Tensor)
aten::binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=1, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::bincount(Tensor self, Tensor? weights=None, int minlength=0) -> (Tensor)
aten::_cummin_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
aten::prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)
aten::_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)
aten::_ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> (Tensor)
aten::embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> (Tensor)
aten::_embedding_bag_forward_only(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)
aten::_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)
aten::_embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> (Tensor)
aten::_embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode) -> (Tensor)
aten::native_group_norm(Tensor input, Tensor? weight, Tensor? bias, int N, int C, int HxW, int group, float eps) -> (Tensor, Tensor, Tensor)
aten::_fft_with_size(Tensor self, int signal_ndim, bool complex_input, bool complex_output, bool inverse, int[] checked_signal_sizes, bool normalized, bool onesided, int[] output_sizes) -> (Tensor)
aten::repeat_interleave.Tensor(Tensor repeats) -> (Tensor)
aten::repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None) -> (Tensor)
aten::repeat_interleave.self_int(Tensor self, int repeats, int? dim=None) -> (Tensor)
aten::_softmax(Tensor self, int dim, bool half_to_float) -> (Tensor)
aten::_mkldnn_transpose(Tensor self, int dim0, int dim1) -> (Tensor)
aten::_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> (Tensor)
aten::_mkldnn_transpose_(Tensor(a!) self, int dim0, int dim1) -> (Tensor(a!))
aten::sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
aten::sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
aten::_sparse_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> (Tensor)
aten::threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> (Tensor)
aten::flip(Tensor self, int[] dims) -> (Tensor)
aten::_unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)
aten::unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
aten::reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> (Tensor(a!))
aten::reflection_pad1d(Tensor self, int[2] padding) -> (Tensor)
aten::unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)
aten::reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> (Tensor)
aten::unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
aten::_unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
aten::reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> (Tensor(a!))
aten::reflection_pad2d(Tensor self, int[4] padding) -> (Tensor)
aten::_standard_gamma_grad(Tensor self, Tensor output) -> (Tensor)
aten::_standard_gamma(Tensor self, Generator? generator=None) -> (Tensor)
aten::_dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> (Tensor)
aten::_sample_dirichlet(Tensor self, Generator? generator=None) -> (Tensor)
aten::reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> (Tensor)
aten::binomial(Tensor count, Tensor prob, Generator? generator=None) -> (Tensor)
aten::to_sparse.sparse_dim(Tensor self, int sparse_dim) -> (Tensor)
aten::to_sparse(Tensor self) -> (Tensor)
aten::quantize_per_tensor(Tensor self, float scale, int zero_point, int dtype) -> (Tensor)
aten::quantize_per_tensor.tensors(Tensor[] tensors, Tensor scales, Tensor zero_points, int dtype) -> (Tensor[])
aten::remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
aten::remainder.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::remainder.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::remainder.int(int a, int b) -> (int)
aten::remainder.float(float a, float b) -> (float)
aten::remainder.int_float(int a, float b) -> (float)
aten::remainder.float_int(float a, int b) -> (float)
aten::remainder(Scalar a, Scalar b) -> (Scalar)
aten::_make_per_tensor_quantized_tensor(Tensor self, float scale, int zero_point) -> (Tensor)
aten::_make_per_channel_quantized_tensor(Tensor self, Tensor scale, Tensor zero_point, int axis) -> (Tensor)
aten::replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> (Tensor(a!))
aten::replication_pad1d(Tensor self, int[2] padding) -> (Tensor)
aten::set_.source_Storage(Tensor(a!) self, int source) -> (Tensor(a!))
aten::set_.source_Storage_storage_offset(Tensor(a!) self, int source, int storage_offset, int[] size, int[] stride=[]) -> (Tensor(a!))
aten::set_.source_Tensor(Tensor(a!) self, Tensor source) -> (Tensor(a!))
aten::set_(Tensor(a!) self) -> (Tensor(a!))
aten::masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> (Tensor(a!))
aten::replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> (Tensor)
aten::put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> (Tensor(a!))
aten::index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> (Tensor(a!))
aten::replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> (Tensor(a!))
aten::replication_pad2d(Tensor self, int[4] padding) -> (Tensor)
aten::scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> (Tensor(a!))
aten::scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> (Tensor(a!))
aten::scatter_.reduce(Tensor(a!) self, int dim, Tensor index, Tensor src, *, str reduce) -> (Tensor(a!))
aten::scatter_.value_reduce(Tensor(a!) self, int dim, Tensor index, Scalar value, *, str reduce) -> (Tensor(a!))
aten::replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> (Tensor)
aten::scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> (Tensor(a!))
aten::__lshift__.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::__lshift__.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::__lshift__.int(int a, int b) -> (int)
aten::__ilshift__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::__ilshift__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::__rshift__.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::__rshift__.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::__rshift__.int(int a, int b) -> (int)
aten::__irshift__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
aten::__irshift__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
aten::tril_(Tensor(a!) self, int diagonal=0) -> (Tensor(a!))
aten::replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> (Tensor(a!))
aten::replication_pad3d(Tensor self, int[6] padding) -> (Tensor)
aten::triu_(Tensor(a!) self, int diagonal=0) -> (Tensor(a!))
aten::replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> (Tensor)
aten::renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> (Tensor(a!))
aten::lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> (Tensor(a!))
aten::lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> (Tensor(a!))
aten::owner_name(RRef(t) self) -> (str)
aten::addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))
aten::diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> (Tensor(a!))
aten::diag(Tensor self, int diagonal=0) -> (Tensor)
aten::triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> (Tensor(a!))
aten::triu(Tensor self, int diagonal=0) -> (Tensor)
aten::tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> (Tensor(a!))
aten::tril(Tensor self, int diagonal=0) -> (Tensor)
aten::trace(Tensor self) -> (Tensor)
aten::take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> (Tensor(a!))
aten::take(Tensor self, Tensor index) -> (Tensor)
aten::alpha_dropout_(Tensor(a!) self, float p, bool train) -> (Tensor(a!))
aten::_symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor)
aten::eig.e(Tensor self, bool eigenvectors=False, *, Tensor(a!) e, Tensor(b!) v) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)
aten::eig(Tensor self, bool eigenvectors=False) -> (Tensor eigenvalues, Tensor eigenvectors)
aten::_cholesky_helper(Tensor self, bool upper) -> (Tensor)
aten::_solve_helper(Tensor self, Tensor A) -> (Tensor, Tensor)
aten::cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::cholesky_inverse(Tensor self, bool upper=False) -> (Tensor)
aten::_qr_helper(Tensor self, bool some) -> (Tensor, Tensor)
aten::ormqr.out(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False, *, Tensor(a!) out) -> (Tensor(a!))
aten::ormqr(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False) -> (Tensor)
aten::_lu_with_info(Tensor self, bool pivot=True, bool check_errors=True) -> (Tensor, Tensor, Tensor)
aten::_lu_solve_helper(Tensor self, Tensor LU_data, Tensor LU_pivots) -> (Tensor)
aten::_multinomial_alias_setup(Tensor probs) -> (Tensor, Tensor)
aten::_multinomial_alias_draw(Tensor J, Tensor q, int num_samples, *, Generator? generator=None) -> (Tensor)
aten::fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
aten::fmod.Scalar(Tensor self, Scalar other) -> (Tensor)
aten::fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
aten::fmod.Tensor(Tensor self, Tensor other) -> (Tensor)
aten::fmod.int(int a, int b) -> (float)
aten::fmod.float(float a, float b) -> (float)
aten::fmod.int_float(int a, float b) -> (float)
aten::fmod.float_int(float a, int b) -> (float)
aten::fmod(Scalar a, Scalar b) -> (float)
aten::_min_max(Tensor self) -> (Tensor, Tensor)
aten::sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)
aten::sort.dimname_values(Tensor self, str dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::sort.dimname(Tensor self, str dim, bool descending=False) -> (Tensor values, Tensor indices)
aten::sort.int(int[](a!) self, bool reverse=False) -> ()
aten::sort.float(float[](a!) self, bool reverse=False) -> ()
aten::sort.Tensor(Tensor[](a!) self, bool reverse=False) -> ()
aten::sort.bool(bool[](a!) self, bool reverse=False) -> ()
aten::sort.str(str[](a!) self, bool reverse=False) -> ()
aten::sort.any(t[](a!) self, bool reverse=False) -> ()
aten::q_scale(Tensor self) -> (float)
aten::topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
aten::topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)
aten::_addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
aten::_addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
aten::_addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))
aten::_index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> (Tensor(a!))
aten::rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None) -> (Tensor)
aten::_cumsum(Tensor self, int dim) -> (Tensor)
aten::_cumsum.out(Tensor self, int dim, *, Tensor(a!) out) -> (Tensor(a!))
aten::_cumprod(Tensor self, int dim) -> (Tensor)
aten::_cumprod.out(Tensor self, int dim, *, Tensor(a!) out) -> (Tensor(a!))
aten::_foreach_add.Scalar(Tensor[] tensors, Scalar scalar) -> (Tensor[])
aten::_mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor, Tensor)
aten::_mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
aten::searchsorted.Tensor(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False) -> (Tensor)
aten::searchsorted.Tensor_out(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> (Tensor(a!))
aten::searchsorted.Scalar(Tensor sorted_sequence, Scalar self, *, bool out_int32=False, bool right=False) -> (Tensor)
aten::smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> (Tensor)
aten::_test_optional_filled_intlist(Tensor values, int[2]? addends) -> (Tensor)
aten::elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output) -> (Tensor)
aten::hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> (Tensor(a!))
aten::leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> (Tensor(a!))
aten::rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None) -> (Tensor(a!))
aten::softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output) -> (Tensor)
aten::mkldnn_reorder_conv3d_weight(Tensor self, int[3] padding=[0, 0, 0], int[3] stride=[1, 1, 1], int[3] dilation=[1, 1, 1], int groups=1) -> (Tensor)
aten::softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> (Tensor)
aten::empty_quantized(int[] size, Tensor qtensor) -> (Tensor)
aten::adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> (Tensor(a!))
aten::adaptive_avg_pool2d(Tensor self, int[2] output_size) -> (Tensor)
aten::adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> (Tensor(a!))
aten::adaptive_avg_pool3d(Tensor self, int[3] output_size) -> (Tensor)
aten::adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> (Tensor)
aten::adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
aten::adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)
aten::adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> (Tensor)
aten::adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
aten::adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor)
aten::adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> (Tensor)
aten::avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> (Tensor)
aten::avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> (Tensor)
aten::avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> (Tensor)
aten::avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> (Tensor)
aten::fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> (Tensor)
aten::max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> (Tensor(a!))
aten::max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> (Tensor)
aten::upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, float? scales=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::upsample_linear1d(Tensor self, int[1] output_size, bool align_corners, float? scales=None) -> (Tensor)
aten::upsample_linear1d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> (Tensor)
aten::upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> (Tensor)
aten::upsample_bilinear2d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> (Tensor)
aten::upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> (Tensor)
aten::upsample_bilinear2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> (Tensor)
aten::upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> (Tensor)
aten::upsample_bicubic2d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> (Tensor)
aten::upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> (Tensor)
aten::upsample_bicubic2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> (Tensor)
aten::upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> (Tensor)
aten::upsample_trilinear3d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> (Tensor)
aten::upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> (Tensor)
aten::upsample_trilinear3d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> (Tensor)
aten::upsample_nearest1d.out(Tensor self, int[1] output_size, float? scales=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::upsample_nearest1d(Tensor self, int[1] output_size, float? scales=None) -> (Tensor)
aten::upsample_nearest1d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> (Tensor)
aten::upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None) -> (Tensor)
aten::upsample_nearest1d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> (Tensor)
aten::upsample_nearest2d.out(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::upsample_nearest2d(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None) -> (Tensor)
aten::upsample_nearest2d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> (Tensor)
aten::upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None) -> (Tensor)
aten::upsample_nearest2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> (Tensor)
aten::upsample_nearest3d.out(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::upsample_nearest3d(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> (Tensor)
aten::upsample_nearest3d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> (Tensor)
aten::upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> (Tensor)
aten::upsample_nearest3d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> (Tensor)
aten::slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] output_padding=[0, 0], int[2] dilation=[1, 1], *, Tensor(a!) out) -> (Tensor(a!))
aten::slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] output_padding=[0, 0], int[2] dilation=[1, 1]) -> (Tensor)
aten::slow_conv_transpose2d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
aten::slow_conv_transpose2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
aten::slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] output_padding=[0, 0, 0], int[3] dilation=[1, 1, 1], *, Tensor(a!) out) -> (Tensor(a!))
aten::slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] output_padding=[0, 0, 0], int[3] dilation=[1, 1, 1]) -> (Tensor)
aten::slow_conv_transpose3d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
aten::slow_conv_transpose3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
aten::thnn_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))
aten::thnn_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)
aten::thnn_conv2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
aten::thnn_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
aten::slow_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))
aten::slow_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)
aten::slow_conv3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
aten::slow_conv3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
aten::slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] dilation=[1, 1]) -> (Tensor)
aten::slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
aten::slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1]) -> (Tensor)
aten::slow_conv_dilated3d_backward(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
aten::col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> (Tensor(a!))
aten::col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> (Tensor)
aten::im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> (Tensor(a!))
aten::im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> (Tensor)
aten::im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> (Tensor(a!))
aten::im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> (Tensor)
aten::_test_optional_floatlist(Tensor values, float[]? addends) -> (Tensor)
aten::mkldnn_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor)
aten::mkldnn_max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1], bool ceil_mode=False) -> (Tensor)
aten::to_dense(Tensor self) -> (Tensor)
aten::mkldnn_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> (Tensor)
aten::quantized_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
aten::quantized_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor)
aten::dequantize.self(Tensor self) -> (Tensor)
aten::dequantize.tensors(Tensor[] tensors) -> (Tensor[])
aten::dequantize.tensor(Tensor qtensor) -> (Tensor)
aten::dequantize.any(Any tensors) -> (Any)
aten::q_per_channel_zero_points(Tensor self) -> (Tensor)
aten::sparse_dim(Tensor self) -> (int)
aten::_dimI(Tensor self) -> (int)
aten::dense_dim(Tensor self) -> (int)
aten::_dimV(Tensor self) -> (int)
aten::_nnz(Tensor self) -> (int)
aten::coalesce(Tensor self) -> (Tensor)
aten::_indices(Tensor(a) self) -> (Tensor(a))
aten::_values(Tensor(a) self) -> (Tensor(a))
aten::values(Tensor(a) self) -> (Tensor(a))
aten::values.str(Dict(str, t) self) -> (t[](*))
aten::values.int(Dict(int, t) self) -> (t[](*))
aten::values.bool(Dict(bool, t) self) -> (t[](*))
aten::values.float(Dict(float, t) self) -> (t[](*))
aten::values.Tensor(Dict(Tensor, t) self) -> (t[](*))
aten::copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> (Tensor(a!))
aten::_cast_Byte(Tensor self, bool non_blocking=False) -> (Tensor)
aten::_cast_Char(Tensor self, bool non_blocking=False) -> (Tensor)
aten::_cast_Double(Tensor self, bool non_blocking=False) -> (Tensor)
aten::_cast_Float(Tensor self, bool non_blocking=False) -> (Tensor)
aten::_cast_Int(Tensor self, bool non_blocking=False) -> (Tensor)
aten::_cast_Long(Tensor self, bool non_blocking=False) -> (Tensor)
aten::_cast_Short(Tensor self, bool non_blocking=False) -> (Tensor)
aten::_cast_Half(Tensor self, bool non_blocking=False) -> (Tensor)
aten::_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank, bool deterministic, bool zero_infinity) -> (Tensor, Tensor)
aten::_cudnn_rnn_flatten_weight(Tensor[] weight_arr, int weight_stride0, int input_size, int mode, int hidden_size, int num_layers, bool batch_first, bool bidirectional) -> (Tensor)
aten::_cudnn_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor? weight_buf, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
aten::_cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])
aten::_masked_scale(Tensor self, Tensor mask, float scale) -> (Tensor)
aten::_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> (Tensor(a!))
aten::_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> (Tensor(a!))
aten::_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> (Tensor(a!))
aten::_reshape_from_tensor(Tensor self, Tensor shape) -> (Tensor)
aten::_shape_as_tensor(Tensor self) -> (Tensor)
aten::feature_dropout(Tensor input, float p, bool train) -> (Tensor)
aten::alpha_dropout(Tensor input, float p, bool train) -> (Tensor)
aten::feature_alpha_dropout(Tensor input, float p, bool train) -> (Tensor)
aten::view_as_real(Tensor(a) self) -> (Tensor(a))
aten::view_as_complex(Tensor(a) self) -> (Tensor(a))
aten::__upsample(Tensor input, int? size=None, int? scale_factor=None, str mode="nearest", bool? align_corners=None) -> (Tensor)
aten::__upsample.size_list(Tensor input, int[]? size=None, int? scale_factor=None, str mode="nearest", bool? align_corners=None) -> (Tensor)
aten::arccos(Tensor self) -> (Tensor)
aten::arccos.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::__upsample_bilinear(Tensor input, int? size=None, int? scale_factor=None) -> (Tensor)
aten::__upsample_bilinear.size_list(Tensor input, int[]? size=None, int? scale_factor=None) -> (Tensor)
aten::__upsample_bilinear.scale_list(Tensor input, int? size=None, int[]? scale_factor=None) -> (Tensor)
aten::__upsample_bilinear.size_list_scale_list(Tensor input, int[]? size=None, int[]? scale_factor=None) -> (Tensor)
aten::arccos_(Tensor(a!) self) -> (Tensor(a!))
aten::avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=[0], bool ceil_mode=False, bool count_include_pad=True) -> (Tensor)
aten::adaptive_avg_pool1d(Tensor self, int[1] output_size) -> (Tensor)
aten::adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)
aten::addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))
aten::affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> (Tensor)
aten::affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> (Tensor)
aten::allclose(Tensor self, Tensor other, float rtol=1.0000000000000001e-05, float atol=1e-08, bool equal_nan=False) -> (bool)
aten::_dim_arange(Tensor like, int dim) -> (Tensor)
aten::_pack_sequence(Tensor output, Tensor batch_sizes, Tensor? sorted_indices, Tensor? unsorted_indices) -> (Tensor, Tensor, Tensor?, Tensor?)
aten::arcsin(Tensor self) -> (Tensor)
aten::arcsin.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::_get_tracing_state() -> (bool)
aten::arcsin_(Tensor(a!) self) -> (Tensor(a!))
aten::_no_grad_fill_(Tensor(a!) tensor, float val) -> (Tensor(a!))
aten::arctan(Tensor self) -> (Tensor)
aten::arctan.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
aten::_no_grad_zero_(Tensor(a!) tensor) -> (Tensor(a!))
aten::arctan_(Tensor(a!) self) -> (Tensor(a!))
aten::atleast_1d(Tensor self) -> (Tensor)
aten::atleast_1d.Sequence(Tensor[] tensors) -> (Tensor[])
aten::atleast_2d(Tensor self) -> (Tensor)
aten::atleast_2d.Sequence(Tensor[] tensors) -> (Tensor[])
aten::atleast_3d(Tensor self) -> (Tensor)
aten::atleast_3d.Sequence(Tensor[] tensors) -> (Tensor[])
aten::_baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))
aten::batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor)
aten::_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask, Tensor reservedSpace) -> (Tensor, Tensor, Tensor)
aten::binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=1) -> (Tensor)
aten::broadcast_tensors(Tensor[] tensors) -> (Tensor[])
aten::block_diag(Tensor[] tensors) -> (Tensor)
aten::isalnum(str self) -> (bool)
aten::clip(Tensor self, Scalar? min=None, Scalar? max=None) -> (Tensor)
aten::clip.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> (Tensor(a!))
aten::isalpha(str self) -> (bool)
aten::clip_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> (Tensor(a!))
aten::cudnn_is_acceptable(Tensor self) -> (bool)
aten::complex(Tensor real, Tensor imag) -> (Tensor)
aten::complex.out(Tensor real, Tensor imag, *, Tensor(a!) out) -> (Tensor(a!))
aten::polar(Tensor abs, Tensor angle) -> (Tensor)
aten::polar.out(Tensor abs, Tensor angle, *, Tensor(a!) out) -> (Tensor(a!))
aten::constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> (Tensor)
aten::convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> (Tensor)
aten::convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
aten::_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
aten::conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)
aten::_copy_from(Tensor self, Tensor dst, bool non_blocking=False) -> (Tensor)
aten::count_nonzero.dim_IntList(Tensor self, int[] dim) -> (Tensor)
aten::count_nonzero(Tensor self, int? dim=None) -> (Tensor)
aten::cudnn_affine_grid_generator(Tensor theta, int N, int C, int H, int W) -> (Tensor grid)
aten::cudnn_affine_grid_generator_backward(Tensor grad, int N, int C, int H, int W) -> (Tensor grad_theta)
aten::cudnn_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor, Tensor)
aten::cudnn_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon, Tensor reserveSpace) -> (Tensor, Tensor, Tensor)
aten::cudnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::cudnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[2] output_mask) -> (Tensor, Tensor)
aten::cudnn_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::cudnn_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[2] output_mask) -> (Tensor, Tensor)
aten::cudnn_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
aten::cudnn_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
__getstate__(__torch__.torch.classes.quantized.LinearPackedParamsBase _0) -> ((Tensor, Tensor?) _0)
__setstate__(__torch__.torch.classes.quantized.LinearPackedParamsBase _0, (Tensor, Tensor?) _1) -> (None _0)
__getstate__(__torch__.torch.classes.rnn.CellParamsBase _0) -> ((str, Tensor[], float[], int[], __torch__.torch.classes.quantized.LinearPackedParamsBase[]) _0)
__setstate__(__torch__.torch.classes.rnn.CellParamsBase _0, (str, Tensor[], float[], int[], __torch__.torch.classes.quantized.LinearPackedParamsBase[]) _1) -> (None _0)
__getstate__(__torch__.torch.classes.quantized.Conv2dPackedParamsBase _0) -> ((Tensor, Tensor?, Tensor[], Tensor[], Tensor[], Tensor) _0)
__setstate__(__torch__.torch.classes.quantized.Conv2dPackedParamsBase _0, (Tensor, Tensor?, Tensor[], Tensor[], Tensor[], Tensor) _1) -> (None _0)
weight(__torch__.torch.classes.quantized.Conv2dPackedParamsBase _0) -> (Tensor _0)
bias(__torch__.torch.classes.quantized.Conv2dPackedParamsBase _0) -> (Tensor? _0)
unpack(__torch__.torch.classes.quantized.Conv2dPackedParamsBase _0) -> ((Tensor, Tensor?) _0)
stride(__torch__.torch.classes.quantized.Conv2dPackedParamsBase _0) -> (int[] _0)
padding(__torch__.torch.classes.quantized.Conv2dPackedParamsBase _0) -> (int[] _0)
dilation(__torch__.torch.classes.quantized.Conv2dPackedParamsBase _0) -> (int[] _0)
groups(__torch__.torch.classes.quantized.Conv2dPackedParamsBase _0) -> (int _0)
__getstate__(__torch__.torch.classes.quantized.Conv3dPackedParamsBase _0) -> ((Tensor, Tensor?, Tensor[], Tensor[], Tensor[], Tensor) _0)
__setstate__(__torch__.torch.classes.quantized.Conv3dPackedParamsBase _0, (Tensor, Tensor?, Tensor[], Tensor[], Tensor[], Tensor) _1) -> (None _0)
weight(__torch__.torch.classes.quantized.Conv3dPackedParamsBase _0) -> (Tensor _0)
bias(__torch__.torch.classes.quantized.Conv3dPackedParamsBase _0) -> (Tensor? _0)
unpack(__torch__.torch.classes.quantized.Conv3dPackedParamsBase _0) -> ((Tensor, Tensor?) _0)
stride(__torch__.torch.classes.quantized.Conv3dPackedParamsBase _0) -> (int[] _0)
padding(__torch__.torch.classes.quantized.Conv3dPackedParamsBase _0) -> (int[] _0)
dilation(__torch__.torch.classes.quantized.Conv3dPackedParamsBase _0) -> (int[] _0)
groups(__torch__.torch.classes.quantized.Conv3dPackedParamsBase _0) -> (int _0)
__getstate__(__torch__.torch.classes.quantized.EmbeddingPackedParamsBase _0) -> ((int, Tensor[], float[], int[]) _0)
__setstate__(__torch__.torch.classes.quantized.EmbeddingPackedParamsBase _0, (int, Tensor[], float[], int[]) _1) -> (None _0)
bit_rate(__torch__.torch.classes.quantized.EmbeddingPackedParamsBase _0) -> (int _0)
version(__torch__.torch.classes.quantized.EmbeddingPackedParamsBase _0) -> (int _0)
__getstate__(__torch__.torch.classes.xnnpack.LinearOpContext _0) -> ((Tensor, Tensor?, Scalar?, Scalar?) _0)
__setstate__(__torch__.torch.classes.xnnpack.LinearOpContext _0, (Tensor, Tensor?, Scalar?, Scalar?) _1) -> (None _0)
__getstate__(__torch__.torch.classes.xnnpack.Conv2dOpContext _0) -> ((Tensor, Tensor?, int[], int[], int[], int, Scalar?, Scalar?) _0)
__setstate__(__torch__.torch.classes.xnnpack.Conv2dOpContext _0, (Tensor, Tensor?, int[], int[], int[], int, Scalar?, Scalar?) _1) -> (None _0)
__init__(__torch__.torch.classes.__backends__.test_backend _0) -> (None _0)
preprocess(Any self, Any mod, Dict(str, Any) method_compile_spec) -> (Any mod)
compile(Any self, Any processed, Dict(str, Any) method_compile_spec) -> (Dict(str, Any) handles)
execute(Any self, Any handle, Any[] input) -> (Any[] output)
__init__(__torch__.torch.classes._TorchScriptTesting._Foo _0, int _1, int _2) -> (None _0)
info(__torch__.torch.classes._TorchScriptTesting._Foo _0) -> (int _0)
increment(__torch__.torch.classes._TorchScriptTesting._Foo _0, int _1) -> (None _0)
add(__torch__.torch.classes._TorchScriptTesting._Foo _0, int _1) -> (int _0)
combine(__torch__.torch.classes._TorchScriptTesting._Foo _0, __torch__.torch.classes._TorchScriptTesting._Foo _1) -> (int _0)
get_x(__torch__.torch.classes._TorchScriptTesting._NoInit _0) -> (int _0)
__init__(__torch__.torch.classes._TorchScriptTesting._StackString _0, str[] _1) -> (None _0)
push(__torch__.torch.classes._TorchScriptTesting._StackString _0, str _1) -> (None _0)
pop(__torch__.torch.classes._TorchScriptTesting._StackString _0) -> (str _0)
clone(__torch__.torch.classes._TorchScriptTesting._StackString _0) -> (__torch__.torch.classes._TorchScriptTesting._StackString _0)
merge(__torch__.torch.classes._TorchScriptTesting._StackString _0, __torch__.torch.classes._TorchScriptTesting._StackString _1) -> (None _0)
__getstate__(__torch__.torch.classes._TorchScriptTesting._StackString _0) -> (str[] _0)
__setstate__(__torch__.torch.classes._TorchScriptTesting._StackString _0, str[] _1) -> (None _0)
return_a_tuple(__torch__.torch.classes._TorchScriptTesting._StackString _0) -> ((float, int) _0)
top(__torch__.torch.classes._TorchScriptTesting._StackString _0) -> (str _0)
__str__(__torch__.torch.classes._TorchScriptTesting._StackString _0) -> (str _0)
__init__(__torch__.torch.classes._TorchScriptTesting._PickleTester _0, int[] _1) -> (None _0)
__getstate__(__torch__.torch.classes._TorchScriptTesting._PickleTester _0) -> (int[] _0)
__setstate__(__torch__.torch.classes._TorchScriptTesting._PickleTester _0, int[] _1) -> (None _0)
top(__torch__.torch.classes._TorchScriptTesting._PickleTester _0) -> (int _0)
pop(__torch__.torch.classes._TorchScriptTesting._PickleTester _0) -> (int _0)
get(__torch__.torch.classes._TorchScriptTesting._LiteInterpreterTest _0, Tensor _1) -> (str _0)
__getstate__(__torch__.torch.classes._TorchScriptTesting._LiteInterpreterTest _0) -> (int _0)
__setstate__(__torch__.torch.classes._TorchScriptTesting._LiteInterpreterTest _0, int _1) -> (None _0)
__init__(__torch__.torch.classes.dist_rpc.WorkerInfo _0, str _1, int _2) -> (None _0)
